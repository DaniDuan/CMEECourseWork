Med_pred_mass = c()
Med_prey_mass = c()
Med_ratio = c()
pdf("../results/Pred_Subplots.pdf",8.3,11.7)
par(mfcol=c(5,1))
n=0
for(i in x){
n= n+1
par(mfg = c(n,1))
plot(density(log(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction==i])),xlab="log(Predator Mass)", ylab = "Density", main=i, cex.main = 1)
pred_mass = mean(log(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction==i]))
pred_med = median(log(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction ==i]))
Av_pred_mass=c(Av_pred_mass,pred_mass)
Med_pred_mass = c(Med_prey_mass, pred_med)
}
mtext("Predator Mass by Feeding Interaction Type", side=3, outer=T, line=-1.5)
graphics.off()
pdf("../results/Prey_Subplots.pdf",8.3,11.7)
par(mfcol=c(5,1))
n=0
for(i in x){
n=n+1
par(mfg=c(n,1))
plot(density(log(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction==i])), xlab = "log(Prey Mass)", ylab = "Density", main = i, cex.main = 1)
prey_mass = mean(log(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction==i]))
prey_med = median(log(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction==i]))
Av_prey_mass = c(Av_prey_mass, prey_mass)
Med_prey_mass = c(Med_prey_mass, prey_med)
}
mtext("Prey Mass by Feeding Interaction Type", side=3, outer=T, line=-1.5)
graphics.off()
pdf("../results/SizeRatio_Subplots.pdf",8.3,11.7)
par(mfcol=c(5,1))
n=0
for(i in x){
n=n+1
par(mfg=c(n,1))
plot(density(MyDF$ratio[MyDF$Type.of.feeding.interaction==i]), xlab = "Ratio", ylab = "Density", main = i)
rat_mean = mean(MyDF$ratio[MyDF$Type.of.feeding.interaction==i])
rat_med = median(MyDF$ratio[MyDF$Type.of.feeding.interaction==i])
Av_ratio = c(Av_ratio, rat_mean)
Med_ratio = c(Med_ratio, rat_med)
}
mtext("Prey/Predator Size Ratio by Feeding Interaction Type", side=3, outer=T, line=-1.5)
graphics.off()
View(MyDF)
ratio_data = log(MyDF$Prey.mass/MyDF$Predator.mass)
MyDF$ratio= ratio_data
MyDF$ratio = as.numeric(MyDF$ratio)
View(MyDF)
Av_pred_mass = c()
Av_prey_mass = c()
Av_ratio = c()
Med_pred_mass = c()
Med_prey_mass = c()
Med_ratio = c()
pdf("../results/Pred_Subplots.pdf",8.3,11.7)
par(mfcol=c(5,1))
n=0
for(i in x){
n= n+1
par(mfg = c(n,1))
plot(density(log(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction==i])),xlab="log(Predator Mass)", ylab = "Density", main=i, cex.main = 1)
pred_mass = mean(log(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction==i]))
pred_med = median(log(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction ==i]))
Av_pred_mass=c(Av_pred_mass,pred_mass)
Med_pred_mass = c(Med_prey_mass, pred_med)
}
mtext("Predator Mass by Feeding Interaction Type", side=3, outer=T, line=-1.5)
graphics.off()
pdf("../results/Prey_Subplots.pdf",8.3,11.7)
par(mfcol=c(5,1))
n=0
for(i in x){
n=n+1
par(mfg=c(n,1))
plot(density(log(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction==i])), xlab = "log(Prey Mass)", ylab = "Density", main = i, cex.main = 1)
prey_mass = mean(log(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction==i]))
prey_med = median(log(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction==i]))
Av_prey_mass = c(Av_prey_mass, prey_mass)
Med_prey_mass = c(Med_prey_mass, prey_med)
}
mtext("Prey Mass by Feeding Interaction Type", side=3, outer=T, line=-1.5)
graphics.off()
pdf("../results/SizeRatio_Subplots.pdf",8.3,11.7)
par(mfcol=c(5,1))
n=0
for(i in x){
n=n+1
par(mfg=c(n,1))
plot(density(MyDF$ratio[MyDF$Type.of.feeding.interaction==i]), xlab = "Ratio", ylab = "Density", main = i)
rat_mean = mean(MyDF$ratio[MyDF$Type.of.feeding.interaction==i])
rat_med = median(MyDF$ratio[MyDF$Type.of.feeding.interaction==i])
Av_ratio = c(Av_ratio, rat_mean)
Med_ratio = c(Med_ratio, rat_med)
}
mtext("Prey/Predator Size Ratio by Feeding Interaction Type", side=3, outer=T, line=-1.5)
graphics.off()
Av_ratio = c()
Med_ratio = c()
pdf("../results/SizeRatio_Subplots.pdf",8.3,11.7)
par(mfcol=c(5,1))
n=0
for(i in x){
n=n+1
par(mfg=c(n,1))
plot(density(MyDF$ratio[MyDF$Type.of.feeding.interaction==i]), xlab = "log(Ratio)", ylab = "Density", main = i)
rat_mean = mean(MyDF$ratio[MyDF$Type.of.feeding.interaction==i])
rat_med = median(MyDF$ratio[MyDF$Type.of.feeding.interaction==i])
Av_ratio = c(Av_ratio, rat_mean)
Med_ratio = c(Med_ratio, rat_med)
}
mtext("Prey/Predator Size Ratio by Feeding Interaction Type", side=3, outer=T, line=-1.5)
graphics.off()
data_mean = data.frame(x, Av_pred_mass,Av_prey_mass,Av_ratio)
colnames(data_mean) = c("Type of feeding","Mean Predator Mass(log)", "Mean Prey Mass(log)", "Mean Ratio")
data_med = data.frame(x,Med_pred_mass, Med_pred_mass, Med_ratio)
View(data_mean)
data_mean = data.frame(x, Av_pred_mass,Av_prey_mass,Av_ratio)
colnames(data_mean) = c("Type of Feeding","Mean log(Predator Mass)", "Mean log(Prey Mass)", "Mean log(Ratio)")
data_med = data.frame(x,Med_pred_mass, Med_pred_mass, Med_ratio)
colnames(data_med) = data.frame("Type of Feeding", "Median log(Predator Mass)", "Median log(Prey Mass)", "Mean log(ratio)")
View(data_mean)
View(data_med)
View(data_med)
View(data_mean)
View(data_med)
View(data_mean)
write.csv(data_mean, file = "../results/PP_Results.csv",row.names = T)
write.csv(data_mean, file = "../results/PP_Results.csv",row.names = F)
write.csv("",file = "../results/PP_Results.csv", row.names = F, append = T)
write.table(data_mean, file = "../results/PP_Results.csv",row.names = F)
write.table("",file = "../results/PP_Results.csv", row.names = F, append = T)
write.table("",file = "../results/PP_Results.csv", append = T)
write.table("\n",file = "../results/PP_Results.csv", append = T)
write.table("\n",file = "../results/PP_Results.csv", row.names = F, append = T)
cat("\n",file = "../results/PP_Results.csv", row.names = F, append = T)
,
,
write.table(data_mean, file = "../results/PP_Results.csv",row.names = F)
cat("\n",file = "../results/PP_Results.csv", append = T)
write.table(data_mean, file = "../results/PP_Results.csv",row.names = F)
cat("\n",file = "../results/PP_Results.csv", append = T)
write.table(data_med, file = "../results/PP_Results.csv", row.names = F, append = T)
rm(list = ls())
dev.off()
require(ggplot2)
require(tidyverse)
require(ggplot2)
MyDF = read.csv("../data/EcolArchives-E089-51-D1.csv")
dplyr::glimpse(MyDF)
MyDF$Type.of.feeding.interaction = as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location = as.factor(MyDF$Location)
plot(MyDF$Predator.mass, MyDF$Prey.mass)
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass))
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass),pch=20,xlab = "Predator Mass(g)", ylab = "Prey Mass(g)")
hist(MyDF$Predator.mass)
hist(log10(MyDF$Predator.mass),xlab = "log10(Predator Mass(g)", ylab = "Count")
hist(log10(MyDF$Predator.mass),xlab="log10(Predator Mass(g)", ylab = "Count", col = "lightblue", border="pink")
par(mfcol=c(2,1)) #plot by column
par(mfg=c(1,1)) #plot in the first column
hist(log10(MyDF$Predator.mass),xlab = "log10(Predator Mass(g)", ylab = "Count", col="lightblue", border="pink", main="Predator")
par(mfg=c(2,1)) #plot in the second column
hist(log10(MyDF$Prey.mass),xlab = "log10(Prey Mass(g))", ylab = "Count", col="lightgreen", border="pink", main="Prey")
hist(log10(MyDF$Predator.mass),xlab = "log10(Body Mass(g))", ylab = "Count",col = rgb(1,0,0,0.5), main = "Predator-prey size Overlap")
hist(log10(MyDF$Prey.mass),col=rgb(0,0,1,0.5),add=T)
legend("topleft", c("Predators","Prey"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)))
boxplot(log10(MyDF$Predator.mass), xlab = "location", ylab= "log10(predator mass)", main= "Predator mass")
boxplot(log(MyDF$Predator.mass)~MyDF$Location, xlab="location", ylab="log10(predator mass)", main="predator mass by location")
boxplot(log(MyDF$Predator.mass)~MyDF$Type.of.feeding.interaction, xlab = "Location", ylab = "Predator Mass", main = "Predator mass by feeding interaction type")
par(fig=c(0,0.8,0,0.8))
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), xlab="predator mass", ylab = "prey mass")
par(fig=c(0,0.8,0.4,1),new=T)
boxplot(log(MyDF$Predator.mass), horizontal = T, axes= F)
par(fig=c(0.55,1,0,0.8),new=T)
boxplot(log(MyDF$Prey.mass),axes=F)
mtext("Fancy Predator-prey scatterplot", side=3, outer=T, line=-3)
pdf("../results/Pred_Prey_overlay.pdf",11.7,8.3)
hist(log(MyDF$Predator.mass),xlab = "body mass", ylab="count", col=rgb(1,0,0,0.5),main= "Predator_prey_overlap")
#rgb: This function creates colors corresponding to the given intensities (between 0 and max) of the red, green and blue primaries.
hist(log(MyDF$Prey.mass),col = rgb(0,0,1,0.5),add=T)
legend("topleft",c("predator","prey"), col=c(rgb(1,0,0,0.5),rgb(0,0,1,0.5)))
graphics.off()
###########################################################
##Beautiful graphics in R
qplot(Prey.mass, Predator.mass, data = MyDF)
qplot(log(Prey.mass),log(Predator.mass),data=MyDF)
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,color = Type.of.feeding.interaction)
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,color = Type.of.feeding.interaction, asp=1)
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,color = Type.of.feeding.interaction)
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,color = Type.of.feeding.interaction, asp=1)
?asp
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,shape = Type.of.feeding.interaction, asp=1)
qplot(log(Prey.mass),log(Predator.mass),data = MyDF, color="red")
qplot(log(Prey.mass),log(Predator.mass),data = MyDF, color=I"red")
qplot(log(Prey.mass),log(Predator.mass),data = MyDF, color=I("red"))
qplot(log(Prey.mass),log(Predator.mass),data = MyDF, size=3)
qplot(log(Prey.mass),log(Predator.mass),data = MyDF, size=I(3))
qplot(log(Prey.mass),log(Predator.mass),data = MyDF, shape=3)
`rlang::last_error()`
rlang::last_error()
qplot(log(Prey.mass),log(Predator.mass),data = MyDF, shape=I(3))
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,color = Type.of.feeding.interaction, alpha = .5)
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,color = Type.of.feeding.interaction, alpha = I(.5))
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,color = Type.of.feeding.interaction, alpha = .5)
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,color = Type.of.feeding.interaction, alpha = I(.5))
qplot(log(Prey.mass),log(Predator.mass),data=MyDF,color = Type.of.feeding.interaction, alpha = I(.5)) #semi-transparent
qplot(Prey.mass, Predator.mass, data = MyDF, geom = c("point","smooth"))
qplot(log(Prey.mass),log(Predator.mass), data = MyDF, geom = c("point","smooth"))
qplot(log(Prey.mass),log(Predator.mass), data = MyDF, geom = c("point","smooth")) +geom_smooth(method = "lm")
qplot(log(Prey.mass),log(Predator.mass), data = MyDF, geom = c("point","smooth"), colour = Type.of.feeding.interaction) +geom_smooth(method = "lm")
qplot(log(Prey.mass),log(Predator.mass), data = MyDF, geom = c("point","smooth"), colour = Type.of.feeding.interaction) +geom_smooth(method = "lm", fullrange = T)
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass), data = MyDF)
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass),data = MyDF, geom = "jitter")
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass),data = MyDF, geom = "boxplot")
qplot(log(Prey.mass/Predator.mass),data = MyDF, geom = "boxplot")
qplot(log(Prey.mass/Predator.mass),data = MyDF, geom = "histogram")
qplot(log(Prey.mass/Predator.mass),data = MyDF, geom = "histogram", fill = Type.of.feeding.interaction)
qplot(log(Prey.mass/Predator.mass),data = MyDF, geom = "histogram", fill = Type.of.feeding.interaction, binwidth = 1)
qplot(log(Prey.mass/Predator.mass),data = MyDF, geom = "density", fill = Type.of.feeding.interaction)
qplot(log(Prey.mass/Predator.mass),data = MyDF, geom = "density", fill = Type.of.feeding.interaction, alpha=I(0.5))
qplot(log(Prey.mass/Predator.mass),facets = Type.of.feeding.interaction ~.,data = MyDF, geom = "density")
qplot(log(Prey.mass/Predator.mass),facets = .~ Type.of.feeding.interaction,data = MyDF, geom = "density")
qplot(Prey.mass, Predator.mass, data = MyDF, log = "xy")
qplot(Prey.mass, Predator.mass, data=MyDF, log = "xy", main = "Relation between predator and prey mass", xlab = "log(Prey mass)(g)", ylab = "log(Predator mass)(g)")
qplot(Prey.mass, Predator.mass, data=MyDF, log = "xy", main = "Relation between predator and prey mass", xlab = "log(Prey mass)(g)", ylab = "log(Predator mass)(g)") + theme_bw()
pdf("../results/MyFirst-ggplot2-Figure.pdf")
print(qplot(Prey.mass, Predator.mass, data = MyDF, log="xy",main = "Relation between predator and prey mass",xlab = "log(Prey mass)(g)",ylab = "log(Predator mass)(g)")+theme_bw())
dev.off()
MyDF = as.data.frame(read.csv("../data/EcolArchives-E089-51-D1.csv"))
qplot(Predator.lifestage, data = MyDF, geom = "bar")
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
MyMetaData
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData) #glimpse
fix(MyData) #you can also do this
detach("package:tidyverse", unload = TRUE)
str(MyData) #glimpse
detach("package:tidyr", unload = TRUE)
library(tidyr)
?mutate
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
MyMetaData
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
#tidyr gather
MyWrangledData2=gather(TempData,key = "Species", value = "Count", 5:ncol(TempData))
#dplyr mutate
MyWrangledData2 = MyWrangledData2 %>% mutate(Cultivation = factor(Cultivation), Block=factor(Block), Plot=factor(Plot), Quadrat=factor(Quadrat), Count= numeric(Count))
?mutate
#dplyr mutate
MyWrangledData2 = MyWrangledData2 %>% mutate(Cultivation = factor(Cultivation), Block=factor(Block), Plot=factor(Plot), Quadrat=factor(Quadrat), Count= as.numeric(Count))
#dplyr mutate
MyWrangledData2 = MyWrangledData2 %>% mutate(Cultivation = as.factor(Cultivation), Block=factor(Block), Plot=factor(Plot), Quadrat=factor(Quadrat), Count= as.numeric(Count))
#dplyr mutate
MyWrangledData2 = MyWrangledData2 %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot=as.factor(Plot), Quadrat=as.factor(Quadrat), Count= as.numeric(Count))
View(MyWrangledData2)
class(MyWrangledData2$Cultivation)
class(MyWrangledData2$Block)
str(MyWrangledData2)
head(MyWrangledData2)
dim(MyWrangledData2)
qplot(Predator.lifestage, data = MyDF, geom = "boxplot")
qplot(Predator.lifestage, log(Prey.mass), data = MyDF, geom = "boxplot")
rm(MyData)
rm(MyMetaData)
rm(MyWrangledData2)
rm(TempData)
qplot(Predator.lifestage, log(Prey.mass), data = MyDF, geom = "violin")
qplot(log(Predator.mass),data = MyDF, geom = "density")
qplot(log(Predator.mass),data = MyDF, geom = "histogram")
qplot(log(Predator.mass),log(Prey.mass),data = MyDF, geom = "point")
qplot(log(Predator.mass),log(Prey.mass),data = MyDF, geom = "smooth")
qplot(log(Predator.mass),log(Prey.mass),data = MyDF, geom = "smooth", method="lm")
p = ggplot(MyDF, aes(x=log(Predator.mass), y = log(Prey.mass), colour = Type.of.feeding.interaction))
p
p = ggplot(MyDF, aes(x=log(Predator.mass), y = log(Prey.mass), colour = Type.of.feeding.interaction))
p
p+geom_point()
p = ggplot(MyDF, aes(x=log(Predator.mass), y=log(Prey.mass), colour = Type.of.feeding.interaction))
q = p+ geom_point(size=I(2), shape=I(10)+theme_bw()+theme(aspect.ratio = 1))
q
rlang::last_error()
p = ggplot(MyDF, aes(x=log(Predator.mass), y=log(Prey.mass), colour = Type.of.feeding.interaction))
q = p+ geom_point(size=I(2), shape=I(10)+theme_bw()+theme(aspect.ratio = 1))
q
q = p+ geom_point(size=I(2), shape=I(10)) +theme_bw()+theme(aspect.ratio = 1)
q
q+theme(legend.position = "none")+theme(aspect.ratio = 1)
p = ggplot(MyDF, aes(x=log(Prey.mass/Predator.mass),fill=Type.of.feeding.interaction)) +geom_density()
p
p = ggplot(MyDF, aes(x=log(Prey.mass/Predator.mass),fill=Type.of.feeding.interaction)) +geom_density(alpha=0.9)
p = ggplot(MyDF, aes(x=log(Prey.mass/Predator.mass),fill=Type.of.feeding.interaction)) +geom_density()+ facet_wrap(.~Type.of.feeding.interaction)
p
p = ggplot(MyDF, aes(x=log(Prey.mass/Predator.mass),fill=Type.of.feeding.interaction)) +geom_density()+ facet_wrap(.~Type.of.feeding.interaction, scales = "free")
p
p = ggplot(MyDF, aes(x=log(Prey.mass/Predator.mass)))+geom_density()+facet_wrap(.~Location, scales = "free")
p
p = ggplot(MyDF, aes(x=log(Prey.mass), y=log(Predator.mass)))+ geom_point()+ facet_wrap(.~Location, scales = "free")
p
p = ggplot(MyDF, aes(x=log(Prey.mass), y=log(Predator.mass)))+ geom_point()+ facet_wrap(.~Location+Type.of.feeding.interaction, scales = "free")
p
p = ggplot(MyDF, aes(x=log(Prey.mass), y=log(Predator.mass)))+ geom_point()+ facet_wrap(.~Type.of.feeding.interaction+Location, scales = "free")
p
require(reshape2)
GenerateMatrix  =function(N){
M = matrix(runif(N*N),N,N)
return(M)
}
M = GenerateMatrix(10)
Melt = melt(M)
p = ggplot(Melt, aes(Var1,Var2,fill=value))+geom_tile()+theme(aspect.ratio = 1)
p
p+geom_tile(colour = "black")+theme(aspect.ratio = 1)
p + theme(legend.position = "none")+theme(aspect.ratio = 1)
a =1
is.numeric(a)
a = "11"
numeric(a)
is.numeric(a)
a="11"
as.numeric(a)
numeric(a)
is.numeric(a)
a=11
is.numeric(a)
a = "11"
class(a)
as.numeric(a)
a = as.numeric(a)
a = "a"
a = as.numeric(a)
class(a)
p + theme(legend.position = "none", panel.background = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text = element_blank(),
axis.title.y = element_blank())
p+scale_fill_continuous(low = "yellow", high = "darkgreen")
p+scale_fill_gradient2()
p+scale_fill_gradientn(colours = grey.colors(10))
p+scale_fill_gradientn(colours = rainbow(10))
p+scale_fill_gradientn(colours = c("red","white","blue"))
return(data.frame(x=x,y=y))
N = 250
M = matrix(rnorm(N*N),N,N)
eigvals = eigen(M)$values
eigDF = data.frame("Real"=Re(eigvals), "Imaginary" = Im(eigvals))
View(eigDF)
eigvals
my_radius = sqrt(N)
ellDF = build_ellipse(my_radius,my_radius)
require(ggplot2)
ellDF = build_ellipse(my_radius,my_radius)
N = 250
M = matrix(rnorm(N*N),N,N)
eigvals = eigen(M)$values
eigDF = data.frame("Real"=Re(eigvals), "Imaginary" = Im(eigvals))
my_radius = sqrt(N)
ellDF = build_ellipse(my_radius,my_radius)
?build_ellipse
ellDF <- build_ellipse(my_radius, my_radius)
?build
require(reshape2)
require(tidyverse)
require(ggplot2)
ellDF = build_ellipse(my_radius,my_radius)
View(GenerateMatrix)
build_ellipse = function(hradius,vradius){
npoints = 250
a = seq(0,2*pi, length = npoints+1)
x = hradius*cos(a)
y = vradius*sin(a)
return(data.frame(x=x,y=y))
}
N = 250
M = matrix(rnorm(N*N),N,N)
eigvals = eigen(M)$values
eigDF = data.frame("Real"=Re(eigvals), "Imaginary" = Im(eigvals))
my_radius = sqrt(N)
ellDF = build_ellipse(my_radius,my_radius)
names(ellDF) = c("Real","Imaginary")
p = ggplot(eigDF, aes(x=Real, y=Imaginary))
p = p+geom_point(shape = I(3)) + theme(legend.position = "none")
p = ggplot(eigDF, aes(x=Real, y=Imaginary))
p = p+geom_point(shape = I(3)) + theme(legend.position = "none")
p = ggplot(eigDF, aes(x=Real, y=Imaginary))
p = p+geom_point(shape = I(3)) + theme(legend.position = "none")
p = p+geom_hline(aes(yintercept = 0))
p = p+geom_vline(aes(xintercept = 0))
p = p+geom_polygon(data = ellDF, aes(x=Real, y=Imaginary, alpha=1/20, fill="red"))
p
a = read.table("../data/Results.txt",header = T)
head(a)
a$ymin = rep(0,dim(a)[1])
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
p
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
p
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
p
a$ymin = rep(0,dim(a)[1])
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
p
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=ye,size=(0.5)),colour = "D55E00", alpha = 1/2, show.legend = F)
p = p+geom_text(data = a,aes(x=x,y=-500,label=Label1))
p = p+scale_x_continuous("My x axis", breaks = seq(3,5,by=0.05))+ scale_y_continuous("My y axis")+ theme_bw()+theme(legend.position = "none")
p
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=(0.5)),colour = "D55E00", alpha = 1/2, show.legend = F)
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=(0.5)),colour = "D55E00", alpha = 1/2, show.legend = F)
p = p+geom_text(data = a,aes(x=x,y=-500,label=Label1))
p = p+scale_x_continuous("My x axis", breaks = seq(3,5,by=0.05))+ scale_y_continuous("My y axis")+ theme_bw()+theme(legend.position = "none")
p
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=(0.5)),colour = "D55E00", alpha = 1/2, show.legend = F)
p = p+geom_text(data = a,aes(x=x,y=-500,label=Label))
p = p+scale_x_continuous("My x axis", breaks = seq(3,5,by=0.05))+ scale_y_continuous("My y axis")+ theme_bw()+theme(legend.position = "none")
p
a$ymin = rep(0,dim(a)[1])
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=(0.5)),colour = "D55E00", alpha = 1/2, show.legend = F)
p = p+geom_text(data = a,aes(x=x,y=-500,label=Label))
p = p+scale_x_continuous("My x axis", breaks = seq(3,5,by=0.05))+ scale_y_continuous("My y axis")+ theme_bw()+theme(legend.position = "none")
p
a$ymin = rep(0,dim(a)[1])
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
a = read.table("../data/Results.txt",header = T)
head(a)
a$ymin = rep(0,dim(a)[1])
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#EG69F00", alpha=1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=(0.5)),colour = "D55E00", alpha = 1/2, show.legend = F)
p = p+geom_text(data = a,aes(x=x,y=-500,label=Label))
p = p+scale_x_continuous("My x axis", breaks = seq(3,5,by=0.05))+ scale_y_continuous("My y axis")+ theme_bw()+theme(legend.position = "none")
p
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#E69F00", alpha=1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=(0.5)),colour = "D55E00", alpha = 1/2, show.legend = F)
p = p+geom_text(data = a,aes(x=x,y=-500,label=Label))
p = p+scale_x_continuous("My x axis", breaks = seq(3,5,by=0.05))+ scale_y_continuous("My y axis")+ theme_bw()+theme(legend.position = "none")
p
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#E69F00", alpha=1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=(0.5)),colour = "#D55E00", alpha = 1/2, show.legend = F)
p = p+geom_text(data = a,aes(x=x,y=-500,label=Label))
p = p+scale_x_continuous("My x axis", breaks = seq(3,5,by=0.05))+ scale_y_continuous("My y axis")+ theme_bw()+theme(legend.position = "none")
p
require(ggplot2)
a = read.table("../data/Results.txt",header = T)
head(a)
a$ymin = rep(0,dim(a)[1])
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#E69F00", alpha=1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=(0.5)),colour = "#D55E00", alpha = 1/2, show.legend = F)
p = p+geom_text(data = a,aes(x=x,y=-500,label=Label))
p = p+scale_x_continuous("My x axis", breaks = seq(3,5,by=0.05))+ scale_y_continuous("My y axis")+ theme_bw()+theme(legend.position = "none")
p
pdf("../results/MyBars.pdf")
p = ggplot(a)
p = p+geom_linerange(data = a, aes(x=x, ymin=ymin, ymax = y1, size=(0.5)),colour = "#E69F00", alpha=1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin, ymax=y2, size=(0.5)),colour = "#56B4E9", alpha = 1/2, show.legend = F)
p = p+geom_linerange(data = a, aes(x=x,ymin=ymin,ymax=y3,size=(0.5)),colour = "#D55E00", alpha = 1/2, show.legend = F)
p = p+geom_text(data = a,aes(x=x,y=-500,label=Label))
p = p+scale_x_continuous("My x axis", breaks = seq(3,5,by=0.05))+ scale_y_continuous("My y axis")+ theme_bw()+theme(legend.position = "none")
p
graphics.off()
