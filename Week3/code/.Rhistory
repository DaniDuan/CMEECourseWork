MyData = read.csv("../data/trees.csv")
ViewMyData)
View(MyData)
ls
ls()
ls(MyData)
str(MyData)
MyData=read.csv("../data/trees.csv",header=F)
MyData=read.table("../data/trees.csv",sep=',', header=T)
MyData=read.csv("../data/trees.csv",skip=5)
MyData=read.csv("../data/trees.csv",header=T)
write.csv(MyData, "../results/MyData.csv")
dir("../results/")
write.table(MyData[1,],file="../results/MyData.csv",append=T)
write.csv(MyData,"../results//MyData.csv",row.names = T)
write.table(MyData,"../results/MyData.csv",col.names = F)
MyData = read.csv()
write.csv(MyData, "../data/tree.csv", header=T)
write.table(MyData, "../results/MyData.csv")
write.csv(MyData, "../results/MyData.csv", row.names = T)
write.table(MyData, "../results/MyData.csv",col.names = F)
MyData = read.csv("../data/trees.csv", header = T)
write.csv(MyData, "../data/tree.csv")
write.table(MyData, "../results/MyData.csv",append = T)
write.csv(MyData, "../results/MyData.csv", row.names = T)
write.table(MyData, "../results/MyData.csv",col.names = F)
View(MyData)
a = T
if (a==T){
print("a is true")
} else {
print("a is false")
}
a = T
if (a==T){
print("a is true")
} else {
print("a is false")
}
z = runif(1)
if (z <= 0.5) {print("Less than a half")}
for (i in 1:10){
j = i*i
print(paste(i, "squared is", j))
}
for (i in 1:10){
j = i^2
print(paste(i, "squared is", j))
}
seq(10)
(1:10)
for(species in c('Heliodoxa rubinoides',
'Boissonneaua jardini',
'Sula nebouxii')){
print(paste('The species is', species))
}
v1 = c("a","bc","def")
for (i in v1){print(i)}
while (i<10){i = i+1 & print(i^2)}
while (i<10){i = i+1 && print(i^2)}
i = o
while (i<10){
i = i+1
print(i^2)}
i = 0
while (i<10){i = i+1 & print(i^2)}
i = 0
while (i<10){
i = i+1
print(i^2)}
i = 0
while (i<Inf){
if (i==10){
break
}
else{
cat("i equals", i, "\n")
i = i+1
}
}
for (i in 1:10){
if ((i %% 2) == 0)
next
print(i)
}
MyFunction = function(Arg1, Arg2){
print(paste("Argument",as.character(Arg1), "is a", class(Arg1)))
print(paste("Arguement",as.character(Arg2),"is a", class(Arg2)))
return (c(Arg1,Arg2))
}
MyFunction(1,2)
MyFunction("Riki","Tiki")
ls()
class(MyFunction())
class(MyFunction
q
class(MyFunction)
is.even = function(n=2){
if (n %% 2 == 0){
return(paste(n, "is even!"))
}
return(paste(n, "is odd"))
}
is.even(6)
is.power2=function(n=2){
if (log2(n) %% 1 == 0){
return(paste(n, "is a power of 2!"))
}
return{paste(n, "is not a power of 2!")}
}
is.power2(4)
is.power2=function(n=2){
if (log2(n) %% 1 == 0){
return(paste(n, "is a power of 2!"))
}
return{paste(n, "is not a power of 2!")}
}
is.power2(4)
is.power2=function(n=2){
if (log2(n) %% 1 == 0){
return(paste(n, "is a power of 2!"))
}
return(paste(n, "is not a power of 2!"))
}
is.power2
is.power2
is.power2(3)
is.power2(4)
is.prime = function(n){
if (n==0){
return(paste(n,"is a zero"))
}
if (n==1){
return(paste(n,"is just a unit"))
}
ints = 2:(n-1)
if (a(n%%ints!=0)){
return(paste(n,"is not a prime"))
}
return(paste(n,"is a composite"))
}
is.prime(3)
is.prime = function(n){
if (n==0){
return(paste(n,"is a zero"))
}
if (n==1){
return(paste(n,"is just a unit"))
}
ints = 2:(n-1)
if (all(n%%ints!=0)){
return(paste(n,"is not a prime"))
}
return(paste(n,"is a composite"))
}
is.prime(3)
TreeHeight = function(degrees,distance){
radians = degrees * pi / 100
height = distance * tan(radians)
print(paste("Tree height is:",height))
return(height)
}
TreeHeight(37,40)
# from its base and angle to its top, using the trigonometric formula
#
# height = distance * tan(radians)
#
# ARGUEMENTS
# degrees: The angle of elevation of tree
# distance The distance from base of tree (e.g. meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"
MyData = read.csv("../data/trees.csv")
View(MyData)
# from its base and angle to its top, using the trigonometric formula
#
# height = distance * tan(radians)
#
# ARGUEMENTS
# degrees: The angle of elevation of tree
# distance The distance from base of tree (e.g. meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"
MyData = read.csv("../data/trees.csv", header = T)
View(MyData)
distance = MyData$Distance.m
radians = MyData$Angle.degrees
MyData = read.csv("../data/trees.csv", header = T)
distance = MyData$Distance.m
radians = MyData$Angle.degrees
TreeHeight = function(degrees,distance){
radians = degrees * pi / 100
height = distance * tan(radians)
print(paste("Tree height is:",height))
return(height)
}
TreeHeight
View(TreeHeight)
TreeHeight(radians,distance)
output = TreeHeight(radians,distance)
View(output)
View(MyData)
MyData = read.csv("../data/trees.csv", header = T)
Distance.m = MyData$Distance.m
Angle.degrees = MyData$Angle.degrees
Species = MyData$Species
TreeHeight = function(degrees,distance){
radians = degrees * pi / 100
height = distance * tan(radians)
print(paste("Tree height is:",height))
return(height)
}
Tree.Height.m = TreeHeight(Angle.degrees,Distance.m)
TreeHts = data.frame(Species, Distance.m, Angle.degrees, Tree.Height.m)
names(TreeHts) = c("Species", "Distance.m", "Angle.degrees", "Tree.Height.m")
TreeHts
View(TreeHts)
write.csv(TreeHts, "../results/TreeHts.csv", row.names = T)
write.csv(TreeHts, "../results/TreeHts.csv", row.names = T, col.names = F)
write.csv(TreeHts, "../results/TreeHts.csv", row.names = T, col.names = F)
write.table(TreeHts, "../results/TreeHts.csv", row.names = T, col.names = F)
write.table(TreeHts, "../results/TreeHts.csv", col.names = F)
View(TreeHts)
write.table(TreeHts, "../results/TreeHts.csv", col.names = F)
write.table(TreeHts[,1], file = "../results/TreeHts.csv", append = T)
write.table(TreeHts, "../results/TreeHts.csv", col.names = F)
write.table(TreeHts[1,], file = "../results/TreeHts.csv", append = T)
write.table(TreeHts, "../results/TreeHts.csv", col.names = F)
write.table(TreeHts, "../results/TreeHts.csv", col.names = F)
write.table(TreeHts, "../results/TreeHts.csv", row.names = F)
# This function calculates height of trees given distance of each tree
# from its base and angle to its top, using the trigonometric formula
#
# height = distance * tan(radians)
#
# ARGUEMENTS
# degrees: The angle of elevation of tree
# distance The distance from base of tree (e.g. meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"
MyData = read.csv("../data/trees.csv", header = T)
Distance.m = MyData$Distance.m
Angle.degrees = MyData$Angle.degrees
Species = MyData$Species
TreeHeight = function(degrees,distance){
radians = degrees * pi / 100
height = distance * tan(radians)
print(paste("Tree height is:",height))
return(height)
}
Tree.Height.m = TreeHeight(Angle.degrees,Distance.m)
TreeHts = data.frame(Species, Distance.m, Angle.degrees, Tree.Height.m)
names(TreeHts) = c("Species", "Distance.m", "Angle.degrees", "Tree.Height.m")
TreeHts
write.table(TreeHts, "../results/TreeHts.csv", row.names = F)
a = 1.0
class(a)
float(a)
float a
M = matrix(runif(1000000), 1000, 1000)
SumAllElements = function(M){
Dimensions = dim(M)
Tot = 0
for (i in 1:Dimensions[1]){
for (j in 1:Dimensions[2]){
Tot = Tot + M[i,j]
}
}
return(Tot)
}
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))
print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
M = matrix(runif(1000000), 1000, 1000)
SumAllElements = function(M){
Dimensions = dim(M)
Tot = 0
for (i in 1:Dimensions[1]){
for (j in 1:Dimensions[2]){
Tot = Tot + M[i,j]
}
}
return(Tot)
}
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))
print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
dim(M)
Dimensions[1]
dim(M)[1]
a = NA
for(i in 1:10){
a = c(a, i)
print(a)
print(object.size(a))
}
a = 0
for(i in 1:10){
a = c(a, i)
print(a)
print(object.size(a))
}
dim(a)
runif(20,min=0,max=2)
NoPreallocFun = function(x){
a = vector()
for (i in 1:x){
a = c(a,i)
print(a)
print(object.size(a))
}
}
system.time(NoPreallocFun(10))
PreallocFun = function(x){
a = rep(NA,x){
a[i] = i
print(a)
print(object.size(a))
}
}
system.time(PreallocFun(10))
PreallocFun = function(x){
a = rep(NA,x){
a[i] = i
print(a)
print(object.size(a))
}
}
system.time(PreallocFun(10))
PreallocFun = function(x){
a = rep(NA,x)
for (i in i:x) {
a[i] = i
print(a)
print(object.size(a))
}
}
system.time(PreallocFun(10))
PreallocFun = function(x){
a = rep(NA,x)
for (i in 1:x) {
a[i] = i
print(a)
print(object.size(a))
}
}
system.time(PreallocFun(10))
# Build a random matrix
M = matrix(rnorm(100),10,10)
# Take the mean of each row
RowMeans = apply(M,1,mean)
print(RowMeans)
SomeOperation = function(v){
if(sum(v) > 0){ #note that sum(v) is a single (scalar) value
return (v*100)
}
return(v)
}
M = matrix(rnorm(100), 10, 10)
print(apply(M,1,SomeOperation))
# Build a random matrix
M = matrix(rnorm(100),10,10)
# Take the mean of each row
RowMeans = apply(M,1,mean)
print(RowMeans)
# Now the variance
RowVars = apply(M,1,var)
print(RowVars)
# by column
ColMeans = apply(M, 2, mean)
print(ColMeans)
# Build a random matrix
M = matrix(rnorm(100),10,10)
# Take the mean of each row
RowMeans = apply(M,1,mean)
print(RowMeans)
# variance
RowVars = apply(M,1,var)
print(RowVars)
# by column
ColMeans = apply(M, 2, mean)
print(ColMeans)
