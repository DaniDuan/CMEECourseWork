r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
Summ = summary(lm(log(Predator.mass)~log(Prey.mass),
data = subset(subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[5]),
Predator.lifestage == unique(Predator.lifestage)[5])))
dataframe1 = data.frame(
unique(MyDF$Type.of.feeding.interaction)[5],
unique(MyDF$Predator.lifestage)[5],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
unique(Type.of.feeding.interaction)[5]
unique(MyDF$Type.of.feeding.interaction)[5]
unique(MyDF$Predator.lifestage)[5]
unique(MyDF$Type.of.feeding.interaction)[4]
unique(MyDF$Type.of.feeding.interaction)
class(unique(MyDF$Type.of.feeding.interaction))
Summ = summary(lm(log(Predator.mass)~log(Prey.mass),
data = subset(subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[3]),
Predator.lifestage == unique(Predator.lifestage)[6])))
unique(MyDF$Predator.lifestage)[6]
unique(MyDF$Type.of.feeding.interaction)[3]
output = data.frame()
for(i in 1:length(unique(MyDF$Type.of.feeding.interaction))){
feed = subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[i])
for(n in 1: length(unique(life$Type.of.feeding.interaction))){
life = subset(feed, Predator.lifestage == unique(Predator.lifestage)[n])
Summ = summary(lm(log(Predator.mass)~log(Prey.mass), data = life))
dataframe = data.frame(
unique(MyDF$Type.of.feeding.interaction)[i],
unique(MyDF$Predator.lifestage)[n],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
output = rbind(output, dataframe)
}
}
output = data.frame()
for(i in 1:length(unique(MyDF$Type.of.feeding.interaction))){
feed = subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[i])
for(n in 1: length(unique(MyDF$Predator.lifestage))){
life = subset(feed, Predator.lifestage == unique(Predator.lifestage)[n])
Summ = summary(lm(log(Predator.mass)~log(Prey.mass), data = life))
dataframe = data.frame(
unique(MyDF$Type.of.feeding.interaction)[i],
unique(MyDF$Predator.lifestage)[n],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
output = rbind(output, dataframe)
}
}
output = data.frame()
for(i in 1:length(unique(MyDF$Type.of.feeding.interaction))){
feed = subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[i])
for(n in 1: length(unique(feed$Predator.lifestage))){
life = subset(feed, Predator.lifestage == unique(Predator.lifestage)[n])
Summ = summary(lm(log(Predator.mass)~log(Prey.mass), data = life))
dataframe = data.frame(
unique(MyDF$Type.of.feeding.interaction)[i],
unique(MyDF$Predator.lifestage)[n],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
output = rbind(output, dataframe)
}
}
Summ = summary(lm(log(Predator.mass)~log(Prey.mass),
data = subset(subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[2]),
Predator.lifestage == unique(Predator.lifestage)[4])))
Summ = summary(lm(log(Predator.mass)~log(Prey.mass),
data = subset(subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[3]),
Predator.lifestage == unique(Predator.lifestage)[4])))
Summ = summary(lm(log(Predator.mass)~log(Prey.mass),
data = subset(subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[2]),
Predator.lifestage == unique(Predator.lifestage)[5])))
dataframe1 = data.frame(
unique(MyDF$Type.of.feeding.interaction)[5],
unique(MyDF$Predator.lifestage)[5],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
Summ = summary(lm(log(Predator.mass)~log(Prey.mass),
data = subset(subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[3]),
Predator.lifestage == unique(Predator.lifestage)[4])))
dataframe1 = data.frame(
unique(MyDF$Type.of.feeding.interaction)[5],
unique(MyDF$Predator.lifestage)[5],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
output = data.frame()
for(i in 1:length(unique(MyDF$Predator.lifestage))){
life = subset(MyDF, Predator.lifestage == unique(Predator.lifestage)[i])
for(n in 1: length(unique(life$Type.of.feeding.interaction))){
feed = subset(life, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[n])
Summ = summary(lm(log(Predator.mass)~log(Prey.mass), data = feed))
dataframe = data.frame(
unique(MyDF$Type.of.feeding.interaction)[n],
unique(MyDF$Predator.lifestage)[i],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
output = rbind(output, dataframe)
}
}
length(unique(MyDF$Type.of.feeding.interaction))
output = data.frame()
for(i in 1:length(unique(MyDF$Predator.lifestage))){
life = subset(MyDF, Predator.lifestage == unique(Predator.lifestage)[i])
for(n in 1: length(unique(life$Type.of.feeding.interaction))){
feed = subset(life, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[n])
Summ = summary(lm(log(Predator.mass)~log(Prey.mass), data = feed))
dataframe = data.frame(
unique(MyDF$Type.of.feeding.interaction)[n],
unique(MyDF$Predator.lifestage)[i],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
output = rbind(output, dataframe)
}
}
Summ = summary(lm(log(Predator.mass)~log(Prey.mass),
data = subset(subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[3]),
Predator.lifestage == unique(Predator.lifestage)[6])))
Summ = summary(lm(log(Predator.mass)~log(Prey.mass),
data = subset(subset(MyDF, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[1]),
Predator.lifestage == unique(Predator.lifestage)[1])))
dataframe1 = data.frame(
unique(MyDF$Type.of.feeding.interaction)[1],
unique(MyDF$Predator.lifestage)[1],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
output = data.frame()
for(i in 1:length(unique(MyDF$Predator.lifestage))){
life = subset(MyDF, Predator.lifestage == unique(Predator.lifestage)[i])
for(n in 1: length(unique(life$Type.of.feeding.interaction))){
feed = subset(life, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[n])
Summ = summary(lm(log(Predator.mass)~log(Prey.mass), data = feed))
dataframe = data.frame(
unique(MyDF$Type.of.feeding.interaction)[n],
unique(MyDF$Predator.lifestage)[i],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
output = rbind(output, dataframe)
}
}
output = data.frame()
for(i in 1:length(unique(MyDF$Predator.lifestage))){
life = subset(MyDF, Predator.lifestage == unique(Predator.lifestage)[i])
for(n in 1: length(unique(life$Type.of.feeding.interaction))){
feed = subset(life, Type.of.feeding.interaction == unique(Type.of.feeding.interaction)[n])
if(nrow(feed)>2){
Summ = summary(lm(log(Predator.mass)~log(Prey.mass), data = feed))
dataframe = data.frame(
unique(MyDF$Type.of.feeding.interaction)[n],
unique(MyDF$Predator.lifestage)[i],
r2 = Summ$r.squared,
inter = Summ$coefficients[1],
slope = Summ$coefficients[2],
pvalue = Summ$coefficients[2,4],
fvalue = as.numeric(Summ$fstatistic[1]))
output = rbind(output, dataframe)
}
}
}
output
View(output)
load("../data/GPDDFiltered.RData")
rm(list=ls())
load("../data/GPDDFiltered.RData")
View(gpdd)
install.packages("maps")
require(maps)
?maps
View(gpdd)
map_data("gpdd")
class(gpdd)
View(gpdd)
ggplot(data = gpdd, mapping = aes(x = long, y = lat))
ggplot(data = gpdd, mapping = aes(x = long, y = lat)) + geom_polygon(col = common.name)
ggplot(data = gpdd, mapping = aes(x = long, y = lat)) + geom_polygon(col = gpdd$common.name)
ggplot(data = gpdd, mapping = aes(x = long, y = lat)) + geom_polygon(fill = gpdd$common.name)
min(gdpp$long)
min(gpdd$long)
map('world', fill = TRUE, col = 1:10)
map('world', fill = TRUE)
map('world', fill = TRUE, col = 1:20)
map('world', fill = TRUE, col = 1:25)
map('world', fill = TRUE, col = 1:30)
map('world', fill = TRUE, col = 1:50)
map('world', fill = TRUE, col = 1:10, wrap=c(-180,180) )
map('world', fill = TRUE)
map('world', fill = TRUE, col = colours())
map('world', fill = TRUE, col = colours(), mapping = aes(x = long, y = lat))
map('world', fill = TRUE, col = colours()) +
ggplot(data = gpdd, mapping = aes(x = long, y = lat))
map('world', fill = TRUE, col = colours()) +
theme(data = gpdd, mapping = aes(x = long, y = lat))
map('world', fill = TRUE, col = colours())
ggplot(data = gpdd, mapping = aes(x = long, y = lat), add=T)
map('world', fill = TRUE, col = colours(), add = T)
ggplot(data = gpdd, mapping = aes(x = long, y = lat), add=T) + theme_bw()
map('world', fill = TRUE, col = colours(), add = T)
ggplot(data = gpdd, mapping = aes(x = long, y = lat), add=T) + theme_bw()
map('world', fill = TRUE, col = colours(), add = T)
ggplot(data = gpdd, mapping = aes(x = long, y = lat), add=T) + theme_bw()
map('world', fill = TRUE, col = colours())
ggplot(data = gpdd, mapping = aes(x = long, y = lat), add=T) + theme_bw()
map.axes()
map('world', fill = TRUE, col = colours())
map.axes()
View(gpdd)
m = map('world', fill = TRUE, col = colours()) + map.axes()
m = map('world', fill = TRUE, col = colours()) + map.axes()
m + geom_point(x = gpdd$long, y = gpdd$lat)
map('world', fill = TRUE, col = colours())
map.axes() + geom_point(x = gpdd$long, y = gpdd$lat)
m = ggplot() + map('world', fill = TRUE, col = colours()) + maps.axes() + geom_point(x = gpdd$long, y = gpdd$lat)
base_world
map_data("world")
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey")
world
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") + theme_bw
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") + theme_bw
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") + theme_bw()
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") + theme_bw()
world
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey") + theme_bw()
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),fill = "light grey") + theme_bw()
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") + theme_bw()
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") + theme_bw() + theme(panel.background = element_blank())
world
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.5))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = common.name, shape = I(3), alpha = I(0.7))
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = gpdd$common.name, shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot(colour = gpdd$common.name) + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "black")+geom_polygon(data = world_map, aes(x = long, y= lat, group = group),colour = "light grey", fill = "light grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "black") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "grey 32", fill = "light grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "grey 44", fill = "light grey") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "grey 44", fill = "grey 90") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "darkskyblue", fill = "light blue") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "deepskyblue", fill = "light blue") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "grey 56", fill = "white") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world = p + borders("world", colour = "grey 55", fill = "grey 100") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "grey 55", fill = "grey 99") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.7))
world
world = p + borders("world", colour = "grey 55", fill = "grey 99") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.8))
world
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "grey 55", fill = "grey 99") +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.8))
world
doit = function(x){
temp_x = sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
popn = rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
result = lapply(1:15, function(i) try(doit(popn), FALSE))
class(result)
result = vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
result[[i]] <- try(doit(popn), FALSE)
}
#install the sqlite package
install.packages('sqldf')
# To load the packages
library(sqldf)
# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')
# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
"CREATE TABLE Consumer
(OriginalID TEXT,
ConKingdom TEXT,
ConPhylum TEXT,
ConSpecies TEXT)")
# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")
# Once we have our table, we can query the results using:
dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")
# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.
Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R
# Import data frames into database
dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)
# Check that the data have been correctly imported into the School table.
dbListTables(db)                 # The tables in the database
dbListFields(db,"Resource")       # The columns in a table
dbReadTable(db, "Resource")    # The data in a table
# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
dbDisconnect(db)            # Close connection
rm(list = c("Resource"))   # Remove data frames
Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R
Resource <- read.csv("../data/Resource.csv")  # Read csv files into R
# Import data frames into database
dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)
# Check that the data have been correctly imported into the School table.
dbListTables(db)                 # The tables in the database
dbListFields(db,"Resource")       # The columns in a table
dbReadTable(db, "Resource")    # The data in a table
# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
dbDisconnect(db)            # Close connection
rm(list = c("Resource"))   # Remove data frames
# To load the packages
library(sqldf)
# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')
# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
"CREATE TABLE Consumer
(OriginalID TEXT,
ConKingdom TEXT,
ConPhylum TEXT,
ConSpecies TEXT)")
rm(list=ls())
# To load the packages
library(sqldf)
# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')
# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
"CREATE TABLE Consumer
(OriginalID TEXT,
ConKingdom TEXT,
ConPhylum TEXT,
ConSpecies TEXT)")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")
dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")
Resource <- read.csv("../data/Resource.csv")  # Read csv files into R
# Import data frames into database
dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)
# Check that the data have been correctly imported into the School table.
dbListTables(db)                 # The tables in the database
dbListFields(db,"Resource")       # The columns in a table
dbReadTable(db, "Resource")    # The data in a table
# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
dbDisconnect(db)            # Close connection
rm(list = c("Resource"))   # Remove data frames
