Starting code feedback for Quqiming, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.70 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week3, .git, Feedback, Week1, Week2

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
.vscode*
python_2*
sys
__pycache__*
csv

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE Coursework Repository

## Description

This repository contains **codes**, **data files** and **generated results** of CMEE Coursework, including basic computing and data analysis and statistics based on [The Multilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/intro.html#) book; organize on weekly basis and update on daily basis.

## Languages

- [x] Bash;
- [x] Python;
- [ ] R

## Dependencies

For some scripts [imagemagick](https://imagemagick.org/index.php) installation is required.

```bash
sudo apt install imagemagick
```
[LaTeX](https://www.latex-project.org/) installation is required (which is a large installation):
```bash
sudo apt install texlive-full texlive-fonts-recommended texlive-pictures texlive-latex-extra imagemagick
```
## Installation

To use scripts in this repository, clone and run.

```bash
git clone https://github.com/DaniDuan/CMEECourseWork.git
```

## Project structure and Usage 

### Chapter 1: Computing
- [x] **Week1**

Shell scripts for courseworks in **shell scripting** and scientific documents with **LaTex** :

- **CompileLaTeX&#46;sh:** A bash script to compile latex with bibtex.

- **ConcatenateTwoFiles&#46;sh:** Concatenate the contents of two files.

- **countlines&#46;sh:** Count number of lines in a file.

- **csvtospace&#46;sh:** Converts a comma separated values (csv) file to a space separated values file (txt); or convert all csv files in the input directory to space separated txt files.

- **MyExampleScript&#46;sh:** A welcome message prints out Hello $User(user name).

- **tabtocsv&#46;sh:** Transform comma-separated files (csv) to tab-separated files. 

- **tiff2png&#46;sh:** Convert a .tif image into .png image; or convert all .tif images in the input directory to .png files.

- **variables&#46;sh**: Examples for usage of variables. 

- **UnixPrac1.txt:** UNIX shell commands with certain functions for reading .fasta files (in the data directory). 

<br/>

- [x] Week2

Biological computing in **Python** :

- **align_seqs.py:** Aligns two DNA sequences, returns the best match, and count the “score” as total of number of bases matched.

- **cfexercises1&#46;py:** Creating easy functions for calculating square root, ranking numbers and calculating the factorial.

- **control_flow.py:** An example of a script that uses various control flow tools within a standard python program structure.

- **dictionary&#46;py:** Populating taxa_dic dictionary derived from taxa, maping order names to sets of taxa.

- **lc1&#46;py:** Creating lists from *birds* data upon requirements using comprehension and loops.

- **lc2&#46;py:** Creating lists from *rainfall* data upon requirements using comprehension and loops.

- **oaks_debugme.py**: Output taxa that are oak trees from a list of species, and debug the written function. 

- **oaks&#46;py:** Find taxa that are oak trees from a list of species.

- **scope&#46;py:** blocks of code illustrating variable scope.

- **test_ontrol_flow&#46;py:** Docstring debugging on control_flow.py.

- **tuple&#46;py:** Output block by species on tuple Birds. 

<br/>

- [ ] Week3

Biological Computing in **R**: 

<br/>

### Chapter 2: Data analysis and statistics

<br/>


## Author name and contact

Name: Danica Duan

Email: d.duan20@imperial.ac.uk
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: data, code, sandbox, results

Found the following files: README.md, .gitignore

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Coursework for CMEE: Week 2

## Description

This Week2 directory contains python scripts and programs for coursework in **Biological Computing in Python I** section of the Computing Chapter of [The Multilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/intro.html) book.

## Languages

Python

## Dependencies

No dependencies required.


## Installation

To use scripts in this directory clone the repository and run.

```bash
git clone https://github.com/DaniDuan/CMEECourseWork.git
```

## Project structure and Usage 

- **align_seqs.py:** Aligns two DNA sequences, returns the best match, and count the “score” as total of number of bases matched.

- **cfexercises1&#46;py:** Creating easy functions for calculating square root, ranking numbers and calculating the factorial.

- **control_flow.py:** An example of a script that uses various control flow tools within a standard python program structure.

- **dictionary&#46;py:** Populating taxa_dic dictionary derived from taxa, maping order names to sets of taxa.

- **lc1&#46;py:** Creating lists from *birds* data upon requirements using comprehension and loops.

- **lc2&#46;py:** Creating lists from *rainfall* data upon requirements using comprehension and loops.

- **oaks_debugme.py**: Output taxa that are oak trees from a list of species, and debug the written function. 

- **oaks&#46;py:** Find taxa that are oak trees from a list of species.

- **scope&#46;py:** blocks of code illustrating variable scope.

- **test_ontrol_flow&#46;py:** Docstring debugging on control_flow.py.

- **tuple&#46;py:** Output block by species on tuple Birds. 

## Author name and contact

Name: Danica Duan

Email: d.duan20@imperial.ac.uk
**********************************************************************

Found following files in results directory: output_sample_sequence.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 22 code files: tuple.py, boilerplate.py, basic_io2.py, oaks.py, cfexercises2.py, basic_io1.py, oaks_debugme.py, loops.py, dictionary.py, lc2.py, basic_io3.py, control_flow.py, cfexercises1.py, test_control_flow.py, basic_csv.py, debugme.py, align_seqs.py, sysargv.py, return.py, scope.py, lc1.py, using_name.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""Output block by species on tuple Birds."""

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!



for i in birds:
    print("Latin name: ", i[0],
    "\n Common name: ", i[1],
    "\n mass: ", i[2], "\n")


**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
Latin name:  Passerculus sandwichensis 
 Common name:  Savannah sparrow 
 mass:  18.7 

Latin name:  Delichon urbica 
 Common name:  House martin 
 mass:  19 

Latin name:  Junco phaeonotus 
 Common name:  Yellow-eyed junco 
 mass:  19.5 

Latin name:  Junco hyemalis 
 Common name:  Dark-eyed junco 
 mass:  19.6 

Latin name:  Tachycineata bicolor 
 Common name:  Tree swallow 
 mass:  20.2 


**********************************************************************

Code ran without errors

Time consumed = 0.07704s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines """

__appname__ = 'boilerplate.py'
__author__ = 'Danica (d.duan20@imperial.ac.uk)'
__version__= '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##

## functions ##
def main(argv):
    """Main entry point of the program"""
    print('This is a boilerplate') #Note: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from the command line"""
    status = main(sys.argv)
    sys.exit("I am exiting right now!")

**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Encountered error (or warning):
I am exiting right now!

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""test for python input and output """
###############
# FILE OUTPUT
###############
# Save the elements of a list into a file
list_to_save = range(100)
f = open('../sandbox/testout.txt','w')
for i in list_to_save: 
    f.write(str(i) + "\n") #Add a new line in the end

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.09153s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
""" Find taxa that are oak trees from a list of species."""


## Finds just those taxa that are oak trees from a list of species
taxa = ['Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

"""creating function for collecting oak name"""
def is_an_oak(name):
    return name.startswith('Quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions  
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

#Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
{'Quercus cerris', 'Quercus robur', 'Quercus petraea'}
{'Quercus cerris', 'Quercus robur', 'Quercus petraea'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.06754s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

""" Excercise file on python loops and conditions"""

for j in range(12):
    if j % 3 == 0:
        print('Hello')

for j in range(15):
    if j % 5 == 3:
        print('Hello')
    elif j % 4 == 3:
        print('Hi')

z = 0
while z !=15:
    print('Hello')
    z = z + 3

z = 12
while z < 100: 
    if z == 31: 
        for k in range(7):
            print('Hello')
    elif z == 18:
        print('Hello')
    z = z + 1
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
Hello
Hello
Hello
Hello
Hello
Hi
Hello
Hi
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello

**********************************************************************

Code ran without errors

Time consumed = 0.08579s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""test for python input and output """
##################
# FILE INPUT
##################
# Open a file for reading
f = open('../data/test.txt', 'r')
# use implicit for loop
# if the object is a file, python will cycle over lines
for line in f:
        print(line)
f.close()


f = open('../data/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)
        
f.close()
**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line

**********************************************************************

Code ran without errors

Time consumed = 0.09087s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Output taxa that are oak trees from a list of species,
and debug the written function """

__appname__ = 'oaks_debugme.py'
__author__ = 'Danica (d.duan20@imperial.ac.uk)'
__version__= '0.0.1'
__license__ = "License for this code/program"

import csv
import sys
import doctest

# include the following two lines for doctest
f = open('../data/TestOaksData.csv','r')
taxa = csv.reader(f)

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus'

    >>> is_an_oak('Quercus robur')
    True

    >>> is_an_oak('Fraxinus excelsior')
    False

    >>> is_an_oak('Pinus sylvestris')
    False

    >>> is_an_oak('Quercus cerris')
    True

    >>> is_an_oak('Quercus petraea')
    True
    """
    # Define function to be tested
    # return name.lower().startswith('quercus')
    name = name.split(" ")
    if name[0] == 'Quercus':
        return True
    else:
        return False

def main(argv): 
    """Main entry point of the program"""

    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    csvwrite.writerow(["Genus", " species"])
    for row in taxa:
        if row[0].lower().strip() == "genus" and row[1].lower().strip() == "species":
            continue
        else: 
            print(row)
            print ("The genus is: ") 
            print(row[0] + '\n')
            if is_an_oak(row[0]):
                print('FOUND AN OAK!\n')
                csvwrite.writerow([row[0], row[1]])    
    return 0
    f.close()
    g.close()

if (__name__ == "__main__"):
    """Makes sure the "main" function is called from the command line"""

    status = main(sys.argv)

doctest.testmod() # To run with embedded tests
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.19755s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""FOR loops in Python"""


for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops  in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!
**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.56523s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
""" Populating taxa_dic dictionary derived from taxa, maping order names to sets of taxa."""

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]


# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc.
#  OR,
# 'Chiroptera': {'Myotis lucifugus'} ... etc


taxa_dic = {}
for i in taxa:
        taxa_dic.setdefault(i[1],set()).add(i[0])
print(taxa_dic)



    



**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Gerbillus henleyi', 'Mus domesticus', 'Peromyscus crinitus', 'Cleithrionomys rutilus'}, 'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}, 'Carnivora': {'Canis lupus', 'Lyacon pictus', 'Arctocephalus gazella'}}

**********************************************************************

Code ran without errors

Time consumed = 0.24456s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""Creating lists from *rainfall* data upon requirements using comprehension and loops."""

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.

#Method 1
my_list = [i for i in rainfall if i[1] >100]

#Method 2
#my_list = [(x, y) for x, y in rainfall if y > 100]

print(my_list)
 



# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

#Method 1
months = [i[0] for i in rainfall if i[1] < 50]

#Method 2
#months = [x for x, y in rainfall if y < 50]

print(months)




# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.

my_list = []
months = []

#Method 1
for i in rainfall:
    if i[1] > 100:
        my_list.append(i)
print(my_list)

for i in rainfall:
    if i[1] < 50:
        months.append(i[0])
print(months)


##Method 2
#for i in rainfall:
#    if i[1] > 100:
#        my_list.append(i)
#    elif i[1] < 50:
#        months.append(i[0])
#print(my_list)
#print(months)


#Method 3
#for x, y in rainfall:
#    if y > 100:
#        my_list.append((x, y))
#print(my_list)

#for x, y in rainfall:
#    if y < 50:
#        months.append(x)
#print(months)
**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.09071s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""test for python storing objects"""
##########################
# Storing objects
##########################
# To save an object (even complex) for later use

my_dictionary = {"a key": 10, "another key": 11}
import pickle 
f = open('../sandbox/testp.p','wb')
pickle.dump(my_dictionary, f)
f.close()

f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close

print(another_dictionary)

**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.08860s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.

__appname__ = 'control_flow.py'
__author__ = 'Danica (d.duan20@imperial.ac.uk)'
__version__= '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##
def even_or_odd(x=0): #if not specified, x should take value 0

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is even!" % x
    return "%d is odd" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2, 3, 4, 5. """
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: 
        return "No division found for %d!" % x
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2,x):
        if x % i == 0:
            print("%d is not a prime: %d is a divisor" % (x, i))
            return False
        print("%d is a prime!" % x)
        return True
    
def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1): 
        if is_prime(i): 
            allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

## functions ##
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
22 is even!
33 is odd
The largest divisor of 120 is 5
No division found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is a prime!
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is a prime!
16 is not a prime: 2 is a divisor
17 is a prime!
18 is not
**********************************************************************

Code ran without errors

Time consumed = 0.08699s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
""" Excercise file on python conditions """

## imports ##
import sys

# constants ##

""" Square root x"""
def foo_1(x = 2):
    y = x ** 0.5
    return "The square root of %d is %d" % (x, y)

"""print out the higher number"""
def foo_2(x = 1,y = 2):
    if x > y:
        return "The higher number is %d" % x
    return "The higher number is %d" % y

"""rank the numbers from small to large"""
def foo_3(x = 3, y = 2,z = 1): 
    if x > y: 
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return "Ranking the three numbers from low to high: [%d, %d ,%d]" % (x, y, z)

"""the factorial of x"""
def foo_4(x = 5): 
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return "the factorial of %d is %d " % (x, result)

"""a recursive function that calculates the factorial of x"""
def foo_5(x = 5):
    if x == 1:
        return 1
    result = x * foo_5(x - 1)
    return result

""" Calculate the factorial of x in a different way"""
def foo_6(x = 5):
    facto = 1
    y = x
    while x >= 1:
        facto = facto * x
        x = x - 1
    return "the factorial of %d is %d " % (y, facto)

## functions ##

def main(argv):
    """Main entry point of the program"""
    print(foo_1(2))
    print(foo_2(3, 5))
    print(foo_3(2, 5, 1))
    print(foo_4(5))

    foo5_in = 5
    foo5_out = foo_5(foo5_in)
    print("the factorial of %d is %d " % (foo5_in, foo5_out))

    print(foo_6(5))

if __name__ == "__main__":
    """Makes sure the "main" function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)



**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
The square root of 2 is 1
The higher number is 5
Ranking the three numbers from low to high: [2, 1 ,5]
the factorial of 5 is 120 
the factorial of 5 is 120 
the factorial of 5 is 120 

**********************************************************************

Code ran without errors

Time consumed = 0.07600s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines """

__appname__ = 'test_ontrol_flow.py'
__author__ = 'Danica (d.duan20@imperial.ac.uk)'
__version__= '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system
import doctest

## constants ##

def even_or_odd(x=0):
    """Find whether a number x is even or odd.

    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, then the closest integer is used:
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negative numbers, positve is taken:
    >>> even_or_odd(-2)
    '-2 is Even!'
    """
    #Define function to be tested
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x



## functions ##
def main(argv):
    """Main entry point of the program"""

    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0



if __name__ == "__main__": 
   """Makes sure the "main" function is called from the command line"""
   status = main(sys.argv)
   sys.exit(status)

doctest.testmod() # To run with embedded tests
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.15129s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""import and write file for species and body mass"""

import csv
# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
f = open('../data/testcsv.csv','r')
csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print('the species is', row[0])

f.close()

# write a file containing only species name and Body mass
f = open('../data/testcsv.csv', 'r')
g = open('../data/bodymass.csv', 'w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread: 
    print(row)
    csvwrite.writerow([row[0], row[4]])

f.close()
g.close()

**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
the species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
the species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
the species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
the species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.08931s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""excercise file for debugging"""

"""Creating a bug for debug test"""
def makeabug(x):
    y = x
    for i in range(x):
        try:
            y = y - 1
            z = x/y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This doesn't work; x = {x}, y = {y}")
        else:
            print(f"ok; x={x}, y={y}, z={z};")
    return z
makeabug(20)

**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
ok; x=20, y=19, z=1.0526315789473684;
ok; x=20, y=18, z=1.1111111111111112;
ok; x=20, y=17, z=1.1764705882352942;
ok; x=20, y=16, z=1.25;
ok; x=20, y=15, z=1.3333333333333333;
ok; x=20, y=14, z=1.4285714285714286;
ok; x=20, y=13, z=1.5384615384615385;
ok; x=20, y=12, z=1.6666666666666667;
ok; x=20, y=11, z=1.8181818181818181;
ok; x=20, y=10, z=2.0;
ok; x=20, y=9, z=2.2222222222222223;
ok; x=20, y=8, z=2.5;
ok; x=20, y=7, z=2.857142857142857;
ok; x=20, y=6, z=3.3333333333333335;
ok; x=20, y=5, z=4
**********************************************************************

Code ran without errors

Time consumed = 0.07725s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""aligns two DNA sequences, returns the best match,
 and count the “score” as total of number of bases matched."""

__appname__ = 'align_seqs.py'
__author__ = 'Danica (d.duan20@imperial.ac.uk)'
__version__= '0.0.1'
__license__ = ""


## Imports ##
import csv
import sys


## Constants ##

## Functions ##
"""Two example sequences to match"""
def file_import():
    f = open('../data/sample_sequence.csv','r')
    csvread = csv.reader(f)
    for row in csvread:
        seq1 = row[0]
        seq2 = row[1]
    f.close()
    return seq1, seq2

"""Assign the longer sequence s1, and the shorter to s2
l1 is length of the longest, l2 that of the shortest"""
def swap_lengths(seq1, seq2): 
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    return s1, s2, l1, l2



"""A function that computes a score by returning the number of matches starting
from arbitrary startpoint (chosen by user)"""
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

"""now try to find the best match (highest score) for the two sequences"""
def best_match(s1, s2, l1, l2):
    my_best_align = None
    my_best_score = -1

    for i in range(l1): # Note that you just take the last alignment with the highest score
        z = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 
    print(my_best_align)
    print(s1)
    print("Best score:", my_best_score)

    return my_best_align, my_best_score

"""output file"""
def file_output(my_best_align, my_best_score):
    g = open('../results/output_sample_sequence.txt','w') 
    g.write('My best alignment is ' + str(my_best_align) + '\n')
    g.write('My best score is ' + str(my_best_score) + '\n')
    g.close()
    return 0

def main(argv): 
    """Main entry point of the program"""
    seq1, seq2 = file_import()
    s1, s2, l1, l2 = swap_lengths(seq1, seq2)
    my_best_align, my_best_score = best_match(s1, s2, l1, l2)
    file_output(my_best_align, my_best_score)
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCGG
**********************************************************************

Code ran without errors

Time consumed = 0.07495s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""test on main"""

import sys
print('This is the name of the script: ', sys.argv[0])
print('Number of arguments: ', len(sys.argv))
print('The arguments are:', str(sys.argv))
**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are: ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.09204s

======================================================================
Inspecting script file return.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""Importance of the return directive """

"""creating list for modify"""
def modify_list_1(some_list): 
    print('got', some_list)
    some_list = [1, 2, 3, 4]
    print('set to', some_list)

my_list = [1, 2, 3]

print('before, my_list =', my_list)

modify_list_1(my_list)

print('after, my_list =', my_list)


"""creating list for modify"""

def modify_list_2(some_list):
    print('got', some_list)
    some_list = [1, 2, 3, 4]
    print('set to', some_list)
    return some_list

my_list = modify_list_2(my_list)

print('after, my_list = ', my_list)

"""creating list for modify"""

def modify_list_3(some_list):
    print('got',some_list)
    some_list.append(4)
    print('changed to', some_list)

my_list = [1, 2, 3]

print('Before, my_list =', my_list)

modify_list_3(my_list)

print('After, my_list =', my_list)


**********************************************************************

Testing return.py...

return.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
before, my_list = [1, 2, 3]
got [1, 2, 3]
set to [1, 2, 3, 4]
after, my_list = [1, 2, 3]
got [1, 2, 3]
set to [1, 2, 3, 4]
after, my_list =  [1, 2, 3, 4]
Before, my_list = [1, 2, 3]
got [1, 2, 3]
changed to [1, 2, 3, 4]
After, my_list = [1, 2, 3, 4]

**********************************************************************

Code ran without errors

Time consumed = 0.07737s

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""blocks of code illustrating variable scope."""


_a_global = 10
if _a_global >= 5:
    _b_global = _a_global

"""creating a_function"""
def a_function():
    _a_global = 5

    if _a_global >= 5:
        _b_global = _a_global
    
    _a_local = 4

    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value of _b_global is", _b_global)
    print("Inside the function, the value of _a_local is", _a_local)

    return None

a_function()

print("Outside the function, the value of _a_global is", _a_global)
print("Outside the function, the value of _b_global is", _b_global)


_a_global = 10
"""creating a_function"""
def a_function():
    _a_local = 4

    print("Inside the function, the value of _a_local is", _a_local)
    print("Inside the function, the value of _a_global is", _a_global)
    
    return None

a_function()

print("Outside the function, the value of _a_global is", _a_global)


_a_global = 10

print("Outside the function, the value of _a_global is", _a_global)

"""creating a_function"""

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4

    print("Inside the function, the value of _a_local is", _a_local)
    print("Inside the function, the value of _a_global is", _a_global)

    return None

a_function()

print("Outside the function, the value of _a_global now is", _a_global)

"""creating a_function"""

def a_function():
    _a_global = 10

"""subfunction for defining global"""
def _a_function2():
    global _a_global
    _a_global = 20

    print("Before calling a_function, value of _a_global is", _a_global)

    _a_function2()

    print("After calling _a_function2, the value of _a_global is", _a_global)

    return None

a_function()

print("The value of _a_global in main workspace is", _a_global)


_a_global = 10

"""creating a_function"""

def a_function():

    """Creating a subfunction"""

    def _a_function2():
        global a_global
        _a_global = 20

    print("Before calling a_function, value of _a_global is", _a_global)

    _a_function2()

    print("After calling a_function2, value of _a_global is", _a_global)

a_function()

print("The value of a_global in main workspace is", _a_global)
**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
Inside the function, the value of _a_global is 5
Inside the function, the value of _b_global is 5
Inside the function, the value of _a_local is 4
Outside the function, the value of _a_global is 10
Outside the function, the value of _b_global is 10
Inside the function, the value of _a_local is 4
Inside the function, the value of _a_global is 10
Outside the function, the value of _a_global is 10
Outside the function, the value of _a_global is 10
Inside the function, the value of _a_local is 4
Insid
**********************************************************************

Code ran without errors

Time consumed = 0.08100s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""Creating lists from *birds* data upon requirements using comprehension and loops."""


birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

#Method 1
Latin_names = [ i[0] for i in birds ]
Common_names = [i[1] for i in birds]
Mean_body_masses = [i[2] for i in birds]

#Method 2
#Latin_names = [x for x, y, z in birds]
#Common_names = [y for x, y, z in birds]
#Mean_body_masses = [z for x, y, z in birds]

print(Latin_names)
print(Common_names)
print(Mean_body_masses)





# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
Latin_names = []
Common_names = []
Mean_body_masses = []

#Method 1
for i in birds:
    Latin_names.append(i[0])
    Common_names.append(i[1])
    Mean_body_masses.append(i[2])


#Method 2
#for x, y, z in birds:
#    Latin_names.append(x)
#    Common_names.append(y)
#    Mean_body_masses.append(z)

print(Latin_names)
print(Common_names)
print(Mean_body_masses)
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.09322s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""Test on main"""


# Filename: using_name.py

if __name__ == "__main__":
    print('This program is being run by itself')

else:
    print('I am being imported from another module')

print("This module's name is: " + __name__)


**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.09471s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!