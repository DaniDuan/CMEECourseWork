# Question 23
chaos_game <- function(x = c(0,3,4), y = c(0,4,1), X = c(0,0), max_time = 15)  {
start_time = proc.time()[3]
graphics.off()# clear any existing graphs and plot your graph within the R window
xy = data.frame(x,y)
plot(xy, xlab = "", ylab = "")
text(0,0.3,"A")
text(3.2,4,"B")
text(4,0.7, "C")
points(X[1],X[2], pch = 19, cex = 0.001)
repeat{
a = sample(3,1)
X = c((X[1]+xy[a,1])/2, (X[2]+xy[a,2])/2)
points(X[1],X[2], pch = 19, cex = 0.001)
if(proc.time()[3]-start_time >= max_time){break}}
return("Given enough times of iteration, a Sierpinski Gasket triangle was generated, in which for every triangle pattern to be 2 times as wide, 3 times amount of the material is needed, therefore has a dimension of log(3)/log(2) = 1.584963.")
}
# Question 24
turtle <- function(start_position = c(0,0), direction = 0.5*pi, length = 2)  {
x = start_position[1]+length*cos(direction)
y = start_position[2]+length*sin(direction)
endpoint = c(x,y)
lines(c(start_position[1],x),c(start_position[2],y))
return(endpoint) # you should return your endpoint here.
}
# Question 25
elbow <- function(start_position = c(0,0), direction = pi/4, length = 2)  {
endpoint1 = turtle(start_position, direction, length)
endpoint2 = turtle(start_position = endpoint1, direction = pi/4, length = 0.95*length)
}
plot()
plot(0,0)
turtle()
elbow()
plot(c(0,10),c(0,10))
elbow()
# Question 24
turtle <- function(start_position = c(0,0), direction = pi/3, length = 2)  {
x = start_position[1]+length*cos(direction)
y = start_position[2]+length*sin(direction)
endpoint = c(x,y)
lines(c(start_position[1],x),c(start_position[2],y))
return(endpoint) # you should return your endpoint here.
}
turtle()
elbow()
# Question 25
elbow <- function(start_position = c(0,0), direction = pi/3, length = 2)  {
endpoint1 = turtle(start_position, direction, length)
turtle(start_position = endpoint1, direction = pi/4, length = 0.95*length)
}
plot(c(0,10),c(0,10))
elbow()
# Question 24
turtle <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
x = start_position[1]+length*cos(direction)
y = start_position[2]+length*sin(direction)
endpoint = c(x,y)
lines(c(start_position[1],x),c(start_position[2],y))
return(endpoint) # you should return your endpoint here.
}
turtle()
endpoint1 = turtle(start_position, direction, length)
# Question 25
elbow <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint1 = turtle(start_position, direction, length)
turtle(start_position = endpoint1, direction = pi/4, length = 0.95*length)
}
elbow()
plot(c(0,10),c(0,10))
elbow()
# Question 26
spiral <- function(start_position, direction, length)  {
endpoint1 = turtle(start_position, direction, length)
spiral(start_position = endpoint1, direction = pi/4, length = 0.95*length)
return("type your written answer here")
}
spiral()
# Question 26
spiral <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint1 = turtle(start_position, direction, length)
spiral(start_position = endpoint1, direction = pi/4, length = 0.95*length)
return("type your written answer here")
}
spiral()
# Question 24
turtle <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
x = start_position[1]+length*cos(direction)
y = start_position[2]+length*sin(direction)
endpoint = c(x,y)
lines(c(start_position[1],x),c(start_position[2],y))
return(endpoint) # you should return your endpoint here.
}
# Question 25
elbow <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint = turtle(start_position, direction, length)
turtle(start_position = endpoint, direction = pi/4, length = 0.95*length)
}
# Question 26
spiral <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint1 = turtle(start_position, direction, length)
spiral(start_position = endpoint1, direction = pi/4, length = 0.95*length)
return("type your written answer here")
}
plot(c(0,10),c(0,10))
spiral()
# Question 26
spiral <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint = turtle(start_position, direction, length)
spiral(start_position = endpoint, direction = pi/4, length = 0.95*length)
return("type your written answer here")
}
spiral()
# Question 26
spiral <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint = turtle(start_position, direction, length)
if(length >= 0.0001){
spiral(start_position = endpoint, direction = pi/4, length = 0.95*length)}
return("type your written answer here")
}
spiral()
plot(c(0,5),c(0,5))
spiral()
# Question 25
elbow <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint = turtle(start_position, direction, length)
turtle(start_position = endpoint, direction = direction + pi/4, length = 0.95*length)
}
# Question 26
spiral <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint = turtle(start_position, direction, length)
if(length >= 0.0001){
spiral(start_position = endpoint, direction = pi/4, length = 0.95*length)}
return("type your written answer here")
}
# Question 25
elbow <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint = turtle(start_position, direction, length)
turtle(start_position = endpoint, direction = direction - pi/4, length = 0.95*length)
}
# Question 26
spiral <- function(start_position = c(0,0), direction = pi/2, length = 2)  {
endpoint = turtle(start_position, direction, length)
if(length >= 0.0001){
spiral(start_position = endpoint, direction = direction - pi/4, length = 0.95*length)}
return("type your written answer here")
}
spiral()
# Question 24
turtle <- function(start_position = c(0,0), direction = pi/2, length = 1)  {
x = start_position[1]+length*cos(direction)
y = start_position[2]+length*sin(direction)
endpoint = c(x,y)
lines(c(start_position[1],x),c(start_position[2],y))
return(endpoint) # you should return your endpoint here.
}
# Question 25
elbow <- function(start_position = c(0,0), direction = pi/2, length = 1)  {
endpoint = turtle(start_position, direction, length)
turtle(start_position = endpoint, direction = direction - pi/4, length = 0.95*length)
}
# Question 26
spiral <- function(start_position = c(0,0), direction = pi/2, length = 1)  {
endpoint = turtle(start_position, direction, length)
if(length >= 0.0001){
spiral(start_position = endpoint, direction = direction - pi/4, length = 0.95*length)}
return("type your written answer here")
}
plot(c(0,10),c(0,10))
spiral()
plot.new()
turtle()
spiral()
?plot.new
plot.new()
spiral()
plot(1, type="n", xlab="", ylab="", xlim=c(0, 5), ylim=c(0, 5))
spiral()
plot(1, type="n", xlab="", ylab="", xlim=c(-3, 3), ylim=c(-3, 3))
spiral()
plot(1, type="n", xlab="", ylab="", xlim=c(-1, 3), ylim=c(-1, 3))
spiral()
# Question 27
draw_spiral <- function()  {
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(1, type="n", xlab="", ylab="", xlim=c(-1, 3), ylim=c(-1, 3))
spiral(start_position = c(0,0), direction = pi/4, length = 1)
}
# Question 27
draw_spiral <- function()  {
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(1, type="n", xlab="", ylab="", xlim=c(-1, 3), ylim=c(-1, 3))
spiral(start_position = c(0,0), direction = pi/4, length = 1)
}
spiral()
draw_spiral()
# Question 27
draw_spiral <- function()  {
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(1, type="n", xlab="", ylab="", xlim=c(-3, 3), ylim=c(-3, 3))
spiral(start_position = c(0,0), direction = pi/4, length = 1)
}
draw_spiral()
# Question 27
draw_spiral <- function()  {
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(1, type="n", xlab="", ylab="", xlim=c(-2, 2), ylim=c(-2, 2))
spiral(start_position = c(0,0), direction = pi/4, length = 1)
}
draw_spiral()
# Question 27
draw_spiral <- function()  {
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(1, type="n", xlab="", ylab="", xlim=c(-2.5, 2.5), ylim=c(-2.5, 2.5))
spiral(start_position = c(0,0), direction = pi/4, length = 1)
}
draw_spiral()
# Question 28
tree <- function(start_position = c(0,0), direction = pi/2, length = 1)  {
endpoint = turtle(start_position, direction, length)
if(length >= 0.0001){
tree(start_position = endpoint, direction = direction - pi/4, length = 0.65 * length)
tree(start_position = endpoint, direction = direction + pi/4, length = 0.65 * length)
}
}
plot(c(0,10),c(0,10))
tree()
# Question 28
tree <- function(start_position = c(0,0), direction = pi/2, length = 1)  {
endpoint = turtle(start_position, direction, length)
if(length >= 0.01){
tree(start_position = endpoint, direction = direction - pi/4, length = 0.65 * length)
tree(start_position = endpoint, direction = direction + pi/4, length = 0.65 * length)
}
}
