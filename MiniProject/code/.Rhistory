t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp), 1.1*max(datai$trait_value), c(unique(datai$consumer),"\n",unique(datai$trait_name)), pos = c(1,2))
print(i) # The progress bar~~
}
graphics.off()
###########Plotting Everything################
pdf("../results/2+3+b+s_plots_AIC.pdf")
for(i in unique(cData$ID)){
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp), 1.1*max(datai$trait_value), unique(datai$consumer), pos = c(1,2))
print(i) # The progress bar~~
}
graphics.off()
###########Plotting Everything################
pdf("../results/2+3+b+s_plots_AIC.pdf")
for(i in unique(cData$ID)){
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(0.9*max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
print(i) # The progress bar~~
}
graphics.off()
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2), adj = 1)
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
par(adj = 1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
par(adj = 0.5)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
par(adj = 1)
text(max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
par(adj = 0.5)
text(max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
par(adj = 0.5)
text(0.95*max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
text(0.95*max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
text(0.9*max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
text(0.5*max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(0.95*max(datai$temp), 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
text(max(datai$temp)-1, 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
for(i in unique(cData$ID)){
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp)-1, 1.1*max(datai$trait_value), unique(datai$trait_name), pos = c(1,2))
print(i) # The progress bar~~
}
graphics.off()
###########Plotting Everything################
pdf("../results/2+3+b+s_plots_AIC.pdf")
for(i in unique(cData$ID)){
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp), 1.1*max(datai$trait_value), i, pos = c(1,2))
print(i) # The progress bar~~
}
graphics.off()
##############Comparing models based on AIC values############
#Comparing and selecting the lowest AIC values as the best fit
Compare_AIC = as.data.frame(matrix(NaN, nr=903, nc=5))
for(i in 1:903){
Compare_AIC[i,1] = i
if(any(lm2_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 2] = lm2_model_fitting$AIC[lm2_model_fitting$ID == i]
if(any(lm3_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 3] = lm3_model_fitting$AIC[lm3_model_fitting$ID == i]
if(any(Briere_AIC$ID == i, na.rm = T)) Compare_AIC[i, 4] = Briere_AIC$AIC[Briere_AIC$ID == i]
if(any(School_fit_AIC$ID == i, na.rm = T)) Compare_AIC[i, 5] = School_fit_AIC$AIC[School_fit_AIC$ID == i]
}
colnames(Compare_AIC) = c("ID", "quadratic", "cubic", "Briere", "Schoolfield")
Compare_AIC = Compare_AIC[-which(is.na(Compare_AIC$quadratic)),]
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Compare_AIC = cbind(Compare_AIC, Best_fit, lm2_model_fitting[,c(2:3, 8:10)])
nrow(Compare_AIC[Compare_AIC$cubic - Compare_AIC$Schoolfield < -2,])/nrow(Compare_AIC)
View(Compare_AIC)
sum(Compare_AIC$Best_fit == "quadratic")/nrow(Compare_AIC) #percentage of this model being the best fit
sum(Compare_AIC$Best_fit == "cubic")/nrow(Compare_AIC)
sum(Compare_AIC$Best_fit == "Briere")/nrow(Compare_AIC)
sum(Compare_AIC$Best_fit == "Schoolfield")/nrow(Compare_AIC)
nrow(Compare_AIC[Compare_AIC$cubic - Compare_AIC$Schoolfield > 2,])/nrow(Compare_AIC)
View(Briere_AIC)
# #Import csv
Compare_AIC = read.csv("../results/Compare_AIC.csv", header = T)
pdf("../results/sub_trait.pdf")
par(fig = c(0, 1, 0.2,1))
ggplot(subAIC_traitname, mapping = aes(x = trait_name, y =trait_value, fill = Best_fit))+
geom_bar(stat = "identity", position = "fill", width = 0.5)+
labs(x = "Trait Name", y = "Percentage of Best Fit")+ theme_bw()
library(ggplot2)
pdf("../results/sub_trait.pdf")
par(fig = c(0, 1, 0.2,1))
ggplot(subAIC_traitname, mapping = aes(x = trait_name, y =trait_value, fill = Best_fit))+
geom_bar(stat = "identity", position = "fill", width = 0.5)+
labs(x = "Trait Name", y = "Percentage of Best Fit")+ theme_bw()
# Subsets with trait name
unique(Compare_AIC$trait_name)
net_photosynthesis_rate = subset(Compare_AIC, Compare_AIC$trait_name == "net photosynthesis rate")
gross_photosynthesis_rate = subset(Compare_AIC, Compare_AIC$trait_name == "gross photosynthesis rate")
respiration_rate = subset(Compare_AIC, Compare_AIC$trait_name == "respiration rate")
bestfit = c(); net = c(); gross = c(); resp = c()
for(i in unique(Compare_AIC$Best_fit)){
bestfit = c(bestfit, i)
net = c(net, sum(net_photosynthesis_rate$Best_fit == i)/nrow(net_photosynthesis_rate))
gross = c(gross, sum(gross_photosynthesis_rate$Best_fit == i)/nrow(gross_photosynthesis_rate))
resp = c(resp, sum(respiration_rate$Best_fit == i)/nrow(respiration_rate))
}
subAIC_traitname = cbind(bestfit, net, gross, resp)
colnames(subAIC_traitname) = c("bestfit", "net photosynthesis", "gross photosynthesis", "respiration")
rownames(subAIC_traitname) = subAIC_traitname[,1]
subAIC_traitname = subAIC_traitname[,2:4]
library(reshape2)
subAIC_traitname = melt(subAIC_traitname)
colnames(subAIC_traitname) = c("Best_fit", "trait_name", "trait_value")
subAIC_traitname$trait_value = as.numeric(subAIC_traitname$trait_value)
library(ggplot2)
pdf("../results/sub_trait.pdf")
par(fig = c(0, 1, 0.2,1))
ggplot(subAIC_traitname, mapping = aes(x = trait_name, y =trait_value, fill = Best_fit))+
geom_bar(stat = "identity", position = "fill", width = 0.5)+
labs(x = "Trait Name", y = "Percentage of Best Fit")+ theme_bw()
graphics.off()
ggplot(subAIC_traitname, mapping = aes(x = trait_name, y =trait_value, fill = Best_fit))+
geom_bar(stat = "identity", position = "fill", width = 0.5)+
labs(x = "Trait Name", y = "Percentage of Best Fit")+ theme_bw()
pdf("../results/sub_trait.pdf", width = 8, height = 6)
ggplot(subAIC_traitname, mapping = aes(x = trait_name, y =trait_value, fill = Best_fit))+
geom_bar(stat = "identity", position = "fill", width = 0.5)+
labs(x = "Trait Name", y = "Percentage of Best Fit")+ theme_bw()
graphics.off()
pdf("../results/602.pdf")
i = 602
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
rm(list=ls())
graphics.off()
library(minpack.lm)
data = read.csv("../data/ThermRespData.csv")
# Store all possible relevant information in a new data frame
cData = data.frame(data$ID,data$StandardisedTraitName, data$OriginalTraitValue, data$OriginalTraitUnit,data$Consumer, data$Habitat, data$Location, data$ConStage, data$ConTemp)
names(cData) = c("ID", "trait_name", "trait_value", "trait_unit","consumer", "habitat", "location", "stage", "temp")
cData = cData[-which(cData$trait_value < 0),] # Getting rid of negative trait values
cData$temp = as.numeric(cData$temp)
# #importing the csv
lm2_model_fitting = read.csv("../results/quadratic.csv", header = T)
lm3_model_fitting = read.csv("../results/cubic.csv", header = T)
############Fitting Briere model#########################
## Define Briere model
Briere = function(Temp, T0, Tm, B0){
return(B0*Temp*(Temp-T0)*(abs(Tm-Temp))^0.5)*as.numeric(T<Tm)*as.numeric(T>T0)
}
# #Import csv
Briere_model_fitting = read.csv("../results/Briere_model_fitting_FullResult.csv", header =T)
#Select on AIC
Briere_AIC = data.frame()
for(i in unique(Briere_model_fitting$ID)){
x = Briere_model_fitting[Briere_model_fitting$ID == i,][which.min(Briere_model_fitting$AIC[Briere_model_fitting$ID == i]),]
Briere_AIC = rbind(Briere_AIC,x)
}
Briere_AIC = Briere_AIC[-which(Briere_AIC$T0 == -80),]
Briere_AIC = Briere_AIC[-which(Briere_AIC$Tm == 100),]
Briere_AIC = Briere_AIC[-which(Briere_AIC$T0 == 40),]
Briere_AIC$ID = as.numeric(Briere_AIC$ID)
Briere_AIC$T0 = as.numeric(Briere_AIC$T0)
Briere_AIC$Tm = as.numeric(Briere_AIC$Tm)
Briere_AIC$B0 = as.numeric(Briere_AIC$B0)
###########Fitting Schoolfield model###################
## Defining Schoolfield model function
Schoolfield = function(tran_kT, lnB0, Th, Ea, Eh){
return(lnB0+(tran_kT+1/(283.15*k))*Ea-log(1+exp((1/(Th*k)+tran_kT)*Eh)))
}
## Fitting lnB ~ -1/k*(1/T-1/283.15) as linear model (Arrhenius)
## intercept = lnB0, slope = Ea
k = 8.61*10^(-5)
# Creating a new data frame for school field model fitting
sch_cData = cData
sch_cData$lnB = log(sch_cData$trait_value)
sch_cData$temp = sch_cData$temp+273.15
sch_cData$tran_kT = -1/(k*sch_cData$temp)
sch_cData$tran_kTT = sch_cData$tran_kT+1/(283.15*k)
sch_cData = sch_cData[-which(sch_cData$lnB == -Inf),]
# #import csv
Arrhenius = read.csv("../results/Arrhenius.csv", header = T)
# #Import csv
School_fit = read.csv("../results/School_fit.csv", header =T)
# Selecting the best AIC fitting for each sample ID
School_fit_AIC = data.frame()
for(i in unique(School_fit$ID)){
x = School_fit[School_fit$ID == i,][which.min(School_fit$AIC[School_fit$ID == i]),]
School_fit_AIC = rbind(School_fit_AIC,x)
}
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$Ea == 5),]
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$Eh == 20),]
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$lnB0 == 5),]
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$Th == 375),]
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$Th == 270),]
pdf("../results/602.pdf")
i = 602
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp), 1.1*max(datai$trait_value), i, pos = c(1,2))
graphics.off()
# Question 1
species_richness <- function(community){
length(unique(community))
}
# Question 2
init_community_max <- function(size){
seq(from = 1, to = size, by = 1)
}
# Question 3
init_community_min <- function(size){
rep(1, times = size)
}
# Question 4
choose_two <- function(max_value){
sample(max_value,2, replace = F)
}
# Question 5
neutral_step <- function(community){
store = choose_two(community)
community[community == store[1]] = store[2]
print(community)
}
# Question 6
neutral_generation <- function(community){
for(i in 1:floor(length(community)/2)) final_community = neutral_step(community)
cat("After one generation:", final_community)
}
# Question 1
species_richness <- function(community = c(1,4,4,5,1,6,1)){
length(unique(community))
}
species_richness()
species_richness(c(1,2,3))
# Question 1
species_richness <- function(community = c(1,4,4,5,1,6,1)){
length(unique(community))
}
# Question 2
init_community_max <- function(size = 7){
seq(from = 1, to = size, by = 1)
}
# Question 3
init_community_min <- function(size = 4){
rep(1, times = size)
}
# Question 4
choose_two <- function(max_value = 4){
sample(max_value,2, replace = F)
}
# Question 5
neutral_step <- function(community = c(10,5,13)){
store = choose_two(community)
community[community == store[1]] = store[2]
print(community)
}
# Question 6
neutral_generation <- function(community = c(1,5,2,6,8,13,25)){
for(i in 1:floor(length(community)/2)) final_community = neutral_step(community)
cat("After one generation:", final_community)
}
neutral_generation()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
neutral_step()
