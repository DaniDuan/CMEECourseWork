plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Briere_AIC$B0[Briere_AIC$ID == i]*t_points*(t_points-Briere_AIC$T0[Briere_AIC$ID == i])*(Briere_AIC$Tm[Briere_AIC$ID == i]-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp), 1.1*max(datai$trait_value), i, pos = c(1,2))
print(i) # The progress bar~~
}
###########Plotting Everything################
pdf("../results/2+3+b+s_plots_AIC.pdf")
for(i in unique(cData$ID)){
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Briere_AIC$B0[Briere_AIC$ID == i]*t_points*(t_points-Briere_AIC$T0[Briere_AIC$ID == i])*(Briere_AIC$Tm[Briere_AIC$ID == i]-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp), 1.1*max(datai$trait_value), i, pos = c(1,2))
print(i) # The progress bar~~
}
graphics.off()
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
class(Briere_AIC$ID)
class(Briere_AIC$T0)
Briere_AIC$ID = as.numeric(Briere_AIC$ID)
Briere_AIC$ID = as.numeric(Briere_AIC$ID)
Briere_AIC$T0 = as.numeric(Briere_AIC$T0)
Briere_AIC$Tm = as.numeric(Briere_AIC$Tm)
Briere_AIC$B0 = as.numeric(Briere_AIC$B0)
###########Plotting Everything################
pdf("../results/2+3+b+s_plots_AIC.pdf")
for(i in unique(cData$ID)){
datai = subset(cData, cData$ID == i) # Data subset for iteration
t_max = max(datai$temp)
t_min = min(datai$temp)
t_points = seq(t_min, t_max, 0.1)
plot(datai$temp, datai$trait_value, xlab = "Temperature(celsius)", ylab = c(unique(datai$trait_name), unique(datai$trait_unit)), ylim = c(0.95*min(datai$trait_value),1.1*max(datai$trait_value)))
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T)
if(class(plm2) != "try-error"){
plm2_pre = predict(plm2, newdata = list(temp = t_points))
lines(t_points, plm2_pre, col = 2)}
plm3 = try(lm(trait_value ~poly(temp,3), data = datai), silent = T)
if(class(plm3) != "try-error"){
plm3_pre = predict(plm3, newdata = list(temp = t_points))
lines(t_points, plm3_pre, col = 3)}
Bdatai = subset(Briere_AIC, Briere_AIC$ID == i)
nlm_pre = Bdatai$B0*t_points*(t_points-Bdatai$T0)*(Bdatai$Tm-t_points)^0.5
try(lines(t_points, nlm_pre, col = 4), silent = T)
datas = subset(sch_cData, sch_cData$ID == i) # Data subset for iteration(Schoolfield)
dataA = subset(School_fit_AIC, School_fit_AIC$ID ==i) # Data subset for starting values
tran_kT = -1/(k*(t_points+273.15))
nlm_pre_school = exp(dataA$lnB0+(tran_kT+1/(283.15*k))*dataA$Ea)/(1+exp((1/(dataA$Th*k)+tran_kT)*dataA$Eh))
try(lines(t_points, nlm_pre_school, col = 7), silent = T)
legend("topleft", legend = c("quadratic","cubic", "Briere", "Schoolfield"), lwd = 2, col = c(2:4, 7))
text(max(datai$temp), 1.1*max(datai$trait_value), i, pos = c(1,2))
print(i) # The progress bar~~
}
graphics.off()
##############Comparing models based on AIC values############
#Comparing and selecting the lowest AIC values as the best fit
Compare_AIC = as.data.frame(matrix(NaN, nr=903, nc=5))
for(i in 1:903){
Compare_AIC[i,1] = i
if(any(lm2_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 2] = lm2_model_fitting$AIC[lm2_model_fitting$ID == i]
if(any(lm3_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 3] = lm3_model_fitting$AIC[lm3_model_fitting$ID == i]
if(any(Briere_AIC$ID == i, na.rm = T)) Compare_AIC[i, 4] = Briere_AIC$AIC[Briere_AIC$ID == i]
if(any(School_fit_AIC$ID == i, na.rm = T)) Compare_AIC[i, 5] = School_fit_AIC$AIC[School_fit_AIC$ID == i]
}
colnames(Compare_AIC) = c("ID", "quadratic", "cubic", "Briere", "Schoolfield")
Compare_AIC = Compare_AIC[-which(is.na(Compare_AIC$quadratic)),]
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Best_fit_nlm = colnames(Compare_AIC[,4:5])[apply(Compare_AIC[,4:5], 1, function(x) which(x == min(x, na.rm = T)))]
Compare_AIC = cbind(Compare_AIC, Best_fit,Best_fit_nlm, lm2_model_fitting[,c(2:3, 8:10)])
View(Compare_AIC)
# #Export csv
write.csv(Compare_AIC, "../results/Compare_AIC.csv", row.names = F)
sum(Compare_AIC$Best_fit == "quadratic")/nrow(Compare_AIC) #percentage of this model being the best fit
sum(Compare_AIC$Best_fit == "cubic")/nrow(Compare_AIC)
sum(Compare_AIC$Best_fit == "Briere")/nrow(Compare_AIC)
sum(Compare_AIC$Best_fit == "Schoolfield")/nrow(Compare_AIC)
View(Compare_AIC)
##############Comparing models based on AIC values############
#Comparing and selecting the lowest AIC values as the best fit
Compare_AIC = as.data.frame(matrix(NaN, nr=903, nc=5))
for(i in 1:903){
Compare_AIC[i,1] = i
if(any(lm2_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 2] = lm2_model_fitting$AIC[lm2_model_fitting$ID == i]
if(any(lm3_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 3] = lm3_model_fitting$AIC[lm3_model_fitting$ID == i]
if(any(Briere_AIC$ID == i, na.rm = T)) Compare_AIC[i, 4] = Briere_AIC$AIC[Briere_AIC$ID == i]
if(any(School_fit_AIC$ID == i, na.rm = T)) Compare_AIC[i, 5] = School_fit_AIC$AIC[School_fit_AIC$ID == i]
}
colnames(Compare_AIC) = c("ID", "quadratic", "cubic", "Briere", "Schoolfield")
Compare_AIC = Compare_AIC[-which(is.na(Compare_AIC$quadratic)),]
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Best_fit_nlm = colnames(Compare_AIC[,4:5])[apply(Compare_AIC[,4:5], 1, function(x) which(x == min(x, na.rm = T)))]
Compare_AIC = cbind(Compare_AIC, Best_fit,Best_fit_nlm, lm2_model_fitting[,c(2:3, 8:10)])
rm(list=ls())
graphics.off()
library(minpack.lm)
library(ggplot2)
data = read.csv("../data/ThermRespData.csv")
# Store all possible relevant information in a new data frame
cData = data.frame(data$ID,data$StandardisedTraitName, data$OriginalTraitValue, data$OriginalTraitUnit,data$Consumer, data$Habitat, data$Location, data$ConStage, data$ConTemp)
names(cData) = c("ID", "trait_name", "trait_value", "trait_unit","consumer", "habitat", "location", "stage", "temp")
cData = cData[-which(cData$trait_value < 0),] # Getting rid of negative trait values
cData$temp = as.numeric(cData$temp)
# #importing the csv
lm2_model_fitting = read.csv("../results/quadratic.csv", header = T)
lm3_model_fitting = read.csv("../results/cubic.csv", header = T)
############Fitting Briere model#########################
## Define Briere model
Briere = function(Temp, T0, Tm, B0){
return(B0*Temp*(Temp-T0)*(abs(Tm-Temp))^0.5)*as.numeric(T<Tm)*as.numeric(T>T0)
}
# #Import csv
Briere_model_fitting = read.csv("../results/Briere_model_fitting_FullResult.csv", header =T)
#Select on AIC
Briere_AIC = data.frame()
for(i in unique(Briere_model_fitting$ID)){
x = Briere_model_fitting[Briere_model_fitting$ID == i,][which.min(Briere_model_fitting$AIC[Briere_model_fitting$ID == i]),]
Briere_AIC = rbind(Briere_AIC,x)
}
Briere_AIC = Briere_AIC[-which(Briere_AIC$T0 == -80),]
Briere_AIC = Briere_AIC[-which(Briere_AIC$Tm == 100),]
Briere_AIC = Briere_AIC[-which(Briere_AIC$T0 == 40),]
Briere_AIC$ID = as.numeric(Briere_AIC$ID)
Briere_AIC$T0 = as.numeric(Briere_AIC$T0)
Briere_AIC$Tm = as.numeric(Briere_AIC$Tm)
Briere_AIC$B0 = as.numeric(Briere_AIC$B0)
###########Fitting Schoolfield model###################
## Defining Schoolfield model function
Schoolfield = function(tran_kT, lnB0, Th, Ea, Eh){
return(lnB0+(tran_kT+1/(283.15*k))*Ea-log(1+exp((1/(Th*k)+tran_kT)*Eh)))
}
## Fitting lnB ~ -1/k*(1/T-1/283.15) as linear model (Arrhenius)
## intercept = lnB0, slope = Ea
k = 8.61*10^(-5)
# Creating a new data frame for school field model fitting
sch_cData = cData
sch_cData$lnB = log(sch_cData$trait_value)
sch_cData$temp = sch_cData$temp+273.15
sch_cData$tran_kT = -1/(k*sch_cData$temp)
sch_cData$tran_kTT = sch_cData$tran_kT+1/(283.15*k)
sch_cData = sch_cData[-which(sch_cData$lnB == -Inf),]
# #import csv
Arrhenius = read.csv("../results/Arrhenius.csv", header = T)
# #Import csv
School_fit = read.csv("../results/School_fit.csv", header =T)
# Selecting the best AIC fitting for each sample ID
School_fit_AIC = data.frame()
for(i in unique(School_fit$ID)){
x = School_fit[School_fit$ID == i,][which.min(School_fit$AIC[School_fit$ID == i]),]
School_fit_AIC = rbind(School_fit_AIC,x)
}
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$Ea == 5),]
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$Eh == 20),]
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$lnB0 == 5),]
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$Th == 375),]
School_fit_AIC = School_fit_AIC[-which(School_fit_AIC$Th == 270),]
##############Comparing models based on AIC values############
#Comparing and selecting the lowest AIC values as the best fit
Compare_AIC = as.data.frame(matrix(NaN, nr=903, nc=5))
for(i in 1:903){
Compare_AIC[i,1] = i
if(any(lm2_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 2] = lm2_model_fitting$AIC[lm2_model_fitting$ID == i]
if(any(lm3_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 3] = lm3_model_fitting$AIC[lm3_model_fitting$ID == i]
if(any(Briere_AIC$ID == i, na.rm = T)) Compare_AIC[i, 4] = Briere_AIC$AIC[Briere_AIC$ID == i]
if(any(School_fit_AIC$ID == i, na.rm = T)) Compare_AIC[i, 5] = School_fit_AIC$AIC[School_fit_AIC$ID == i]
}
colnames(Compare_AIC) = c("ID", "quadratic", "cubic", "Briere", "Schoolfield")
Compare_AIC = Compare_AIC[-which(is.na(Compare_AIC$quadratic)),]
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Best_fit_nlm = colnames(Compare_AIC[,4:5])[apply(Compare_AIC[,4:5], 1, function(x) which(x == min(x, na.rm = T)))]
Compare_AIC = cbind(Compare_AIC, Best_fit,Best_fit_nlm, lm2_model_fitting[,c(2:3, 8:10)])
##############Comparing models based on AIC values############
#Comparing and selecting the lowest AIC values as the best fit
Compare_AIC = as.data.frame(matrix(NaN, nr=903, nc=5))
for(i in 1:903){
Compare_AIC[i,1] = i
if(any(lm2_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 2] = lm2_model_fitting$AIC[lm2_model_fitting$ID == i]
if(any(lm3_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 3] = lm3_model_fitting$AIC[lm3_model_fitting$ID == i]
if(any(Briere_AIC$ID == i, na.rm = T)) Compare_AIC[i, 4] = Briere_AIC$AIC[Briere_AIC$ID == i]
if(any(School_fit_AIC$ID == i, na.rm = T)) Compare_AIC[i, 5] = School_fit_AIC$AIC[School_fit_AIC$ID == i]
}
colnames(Compare_AIC) = c("ID", "quadratic", "cubic", "Briere", "Schoolfield")
Compare_AIC = Compare_AIC[-which(is.na(Compare_AIC$quadratic)),]
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Best_fit_nlm = colnames(Compare_AIC[,4:5])[apply(Compare_AIC[,4:5], 1, function(x) which(x == min(x, na.rm = T)))]
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Best_fit_nlm = colnames(Compare_AIC[,4:5])[apply(Compare_AIC[,4:5], 1, function(x) which(x == min(x, na.rm = T)))]
##############Comparing models based on AIC values############
#Comparing and selecting the lowest AIC values as the best fit
Compare_AIC = as.data.frame(matrix(NaN, nr=903, nc=5))
for(i in 1:903){
Compare_AIC[i,1] = i
if(any(lm2_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 2] = lm2_model_fitting$AIC[lm2_model_fitting$ID == i]
if(any(lm3_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 3] = lm3_model_fitting$AIC[lm3_model_fitting$ID == i]
if(any(Briere_AIC$ID == i, na.rm = T)) Compare_AIC[i, 4] = Briere_AIC$AIC[Briere_AIC$ID == i]
if(any(School_fit_AIC$ID == i, na.rm = T)) Compare_AIC[i, 5] = School_fit_AIC$AIC[School_fit_AIC$ID == i]
}
class(Compare_AIC)
class(Compare_AIC$V1)
class(Compare_AIC$V2)
class(Compare_AIC$V3)
class(Compare_AIC$V4)
class(Compare_AIC$V5)
colnames(Compare_AIC) = c("ID", "quadratic", "cubic", "Briere", "Schoolfield")
Compare_AIC = Compare_AIC[-which(is.na(Compare_AIC$quadratic)),]
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Best_fit_nlm = colnames(Compare_AIC[,4:5])[apply(Compare_AIC[,4:5], 1, function(x) which(x == min(x, na.rm = T)))]
warnings()
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, nan.rm = T)))]
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Best_fit_nlm = colnames(Compare_AIC[,4:5])[apply(Compare_AIC[,4:5], 1, function(x) which(x == min(x, na.rm = T)))]
Compare_AIC = cbind(Compare_AIC, Best_fit,Best_fit_nlm, lm2_model_fitting[,c(2:3, 8:10)])
Compare_AIC = cbind(Compare_AIC, Best_fit,Best_fit_nlm, lm2_model_fitting[,c(2:3, 8:10)])
Compare_AIC = cbind(Compare_AIC, Best_fit, lm2_model_fitting[,c(2:3, 8:10)])
# #Export csv
write.csv(Compare_AIC, "../results/Compare_AIC.csv", row.names = F)
sum(Compare_AIC$Best_fit == "quadratic")/nrow(Compare_AIC) #percentage of this model being the best fit
sum(Compare_AIC$Best_fit == "cubic")/nrow(Compare_AIC)
sum(Compare_AIC$Best_fit == "Briere")/nrow(Compare_AIC)
sum(Compare_AIC$Best_fit == "Schoolfield")/nrow(Compare_AIC)
# Subsets with trait name
unique(Compare_AIC$trait_name)
net_photosynthesis_rate = subset(Compare_AIC, Compare_AIC$trait_name == "net photosynthesis rate")
gross_photosynthesis_rate = subset(Compare_AIC, Compare_AIC$trait_name == "gross photosynthesis rate")
respiration_rate = subset(Compare_AIC, Compare_AIC$trait_name == "respiration rate")
bestfit = c(); net = c(); gross = c(); resp = c()
for(i in unique(Compare_AIC$Best_fit)){
bestfit = c(bestfit, i)
net = c(net, sum(net_photosynthesis_rate$Best_fit == i)/nrow(net_photosynthesis_rate))
gross = c(gross, sum(gross_photosynthesis_rate$Best_fit == i)/nrow(gross_photosynthesis_rate))
resp = c(resp, sum(respiration_rate$Best_fit == i)/nrow(respiration_rate))
}
subAIC_traitname = cbind(bestfit, net, gross, resp)
View(subAIC_traitname)
sum(Compare_AIC$Best_fit == "quadratic")/nrow(Compare_AIC) #percentage of this model being the best fit
sum(Compare_AIC$Best_fit == "cubic")/nrow(Compare_AIC)
sum(Compare_AIC$Best_fit == "Briere")/nrow(Compare_AIC)
sum(Compare_AIC$Best_fit == "Schoolfield")/nrow(Compare_AIC)
##############Comparing models based on AIC values############
#Comparing and selecting the lowest AIC values as the best fit
Compare_AIC = as.data.frame(matrix(NaN, nr=903, nc=5))
for(i in 1:903){
Compare_AIC[i,1] = i
if(any(lm2_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 2] = lm2_model_fitting$AIC[lm2_model_fitting$ID == i]
if(any(lm3_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 3] = lm3_model_fitting$AIC[lm3_model_fitting$ID == i]
if(any(Briere_AIC$ID == i, na.rm = T)) Compare_AIC[i, 4] = Briere_AIC$AIC[Briere_AIC$ID == i]
if(any(School_fit_AIC$ID == i, na.rm = T)) Compare_AIC[i, 5] = School_fit_AIC$AIC[School_fit_AIC$ID == i]
}
colnames(Compare_AIC) = c("ID", "quadratic", "cubic", "Briere", "Schoolfield")
Compare_AIC = Compare_AIC[-which(is.na(Compare_AIC$quadratic)),]
qua_cub = Compare_AIC$quadratic - Compare_AIC$cubic
qua_Bri = Compare_AIC$quadratic - Compare_AIC$Briere
qua_Sch = Compare_AIC$quadratic - Compare_AIC$Schoolfield
cub_Bri = Compare_AIC$cubic - Compare_AIC$Briere
cub_Sch = Compare_AIC$cubic - Compare_AIC$Schoolfield
Bri_Sch = Compare_AIC$Briere - Compare_AIC$Schoolfield
Comp = cbind(qua_cub, qua_Bri, qua_Sch, cub_Bri, cub_Sch, Bri_Sch)
View(Comp)
Comp = cbind(Compare_AIC$ID, qua_cub, qua_Bri, qua_Sch, cub_Bri, cub_Sch, Bri_Sch)
Bri_Sch = Compare_AIC$Briere - Compare_AIC$Schoolfield
Bri_Sch
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Compare_AIC = cbind(Compare_AIC, Best_fit, lm2_model_fitting[,c(2:3, 8:10)])
?order
order(c(2,3,1,4))
order(c(2,3,1,4),decreasing = F)
order(c(3,2,1,5),decreasing = F)
order(c(1,0,8,4),decreasing = F)
a = c(1,0,5,3)
order(a)
a[order(a)]
a = c(1,0,5,3, NA)
a[order(a)]
a[order(a), na.last = NA]
a[order(a), na.last = F]
a[order(a), na.last = FALSE]
a[order(a)]
Second_Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == x[order(x)][2]))]
a[order(a)][1]
a[order(a)][2]
Second_Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x[order(x)][2]))]
Second_Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == x[order(x)][2]))]
x[order(x)][2]
Second_Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == x[order(,x)][2]))]
x == x[order(,x)][2]
x
min(x, na.rm = T)
x[order(x)][2]
x[order(x)][2,]
x[order(x)][,2]
Second_Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == x[order(x)][,2]))]
Best_fit
Second_Best_fit
Second_Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == x[order(x)[2]]))]
a[order(a)[2]]
a
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])[2]]
}
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])[2]]
Second_Best_fit = c(Second_Best_fit, x)
}
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])[2]]
Second_Best_fit = c(Second_Best_fit, x)
}
Second_Best_fit
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])[2]]
Second_Best = colnames(Compare_AIC[i,2:5])[apply(Compare_AIC[i,2:5], 1, function(a) which(a == x))]
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
Second_Best_fit
x
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])[2]]
Second_Best = colnames(any(Compare_AIC == x))
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])[2]]
Second_Best = colnames(any(Compare_AIC[i,] == x))
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])[2]]
Second_Best = colnames(any(Compare_AIC[i,2:5] == x))
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])[2]]
x
order(Compare_AIC[i,2:5])[2]
Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])]
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
x
Second_Best = colnames(any(Compare_AIC[i,2:5] == x))
any(Compare_AIC[i,2:5] == x)
Second_Best = colnames(any(Compare_AIC[i,2:5] = x))
Second_Best = colnames(any(Compare_AIC[,2:5] == x))
Second_Best = colnames(any(Compare_AIC[i,2:5] == x[2]))
x
as.numeric(x)
Second_Best = colnames(any(Compare_AIC[i,2:5] == as.numeric(x)))
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
Second_Best = colnames(any(Compare_AIC[i,2:5] == as.numeric(x)))
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
Second_Best = colnames(any(Compare_AIC[i,2:5] == as.numeric(x)))
any(Compare_AIC[i,2:5] == as.numeric(x))
Second_Best = colnames(any(Compare_AIC[i,] == as.numeric(x)))
x
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
Second_Best = colnames(any(Compare_AIC[i,] == as.numeric(x)))
Second_Best
x
order(Compare_AIC[i,2:5]
)
Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])]
i
Compare_AIC[i,2:5]
Compare_AIC[903,2:5]
Compare_AIC[1,2:5]
Second_Best_fit
Second_Best_fit = c()
Compare_AIC[10,2:5]
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
Second_Best = colnames(any(Compare_AIC[i,] == as.numeric(x)))
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
i = 1
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
Second_Best = colnames(any(Compare_AIC[i,] == as.numeric(x)))
colnames(any(Compare_AIC[i,] == as.numeric(x))
)
order(Compare_AIC[i,2:5])
x\
x
Second_Best = colnames(which(Compare_AIC[i,2:5] == x))
Second_Best = colnames(which(Compare_AIC[i,2:5] == as.numeric(x)))
as.numeric(x)
Compare_AIC[i,2:5]
which(Compare_AIC[i,2:5] == as.numeric(x))
colnames(2)
colnames[2]
colnames
colnames(Compare_AIC)
colnames(Compare_AIC[2])
which(Compare_AIC[i,2:5] == as.numeric(x))
Compare_AIC[which(Compare_AIC[i,2:5] == as.numeric(x))]
colnames(Compare_AIC[which(Compare_AIC[i,2:5] == as.numeric(x))])
Second_Best_fit = c()
for(i in Compare_AIC$ID){
i = 1
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
Second_Best = colnames(Compare_AIC[which(Compare_AIC[i,2:5] == as.numeric(x))])
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
Second_Best = colnames(Compare_AIC[which(Compare_AIC[i,2:5] == as.numeric(x))])
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
Compare_AIC = cbind(Compare_AIC, Best_fit,Second_Best_fit, lm2_model_fitting[,c(2:3, 8:10)])
Second_Best_fit
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
Second_Best = colnames(Compare_AIC[which(Compare_AIC[i,2:5] == as.numeric(x))]+1)
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
Compare_AIC = cbind(Compare_AIC, Best_fit,Second_Best_fit, lm2_model_fitting[,c(2:3, 8:10)])
Second_Best_fit
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
Second_Best = colnames(Compare_AIC[which(Compare_AIC[i,2:5] == as.numeric(x))+1])
Second_Best_fit = c(Second_Best_fit, Second_Best)
}
Compare_AIC = cbind(Compare_AIC, Best_fit,Second_Best_fit, lm2_model_fitting[,c(2:3, 8:10)])
Second_Best_fit
Second_Best_fit = c()
for(i in Compare_AIC$ID){
x = Compare_AIC[i,2:5][order(Compare_AIC[i,2:5])][2]
Second_Best = colnames(Compare_AIC[which(Compare_AIC[i,2:5] == as.numeric(x))+1])
dataframe = data.frame(i, Second_Best)
Second_Best_fit = rbind(Second_Best_fit, dataframe)
}
i
View(Comp)
nrow(Compare_AIC$cubic - Compare_AIC$Schoolfield)
nrow(Compare_AIC$cubic - Compare_AIC$Schoolfield > 2)
length(Compare_AIC$cubic - Compare_AIC$Schoolfield > 2)
sum(cub_Sch > 2)
length(cub_Sch > 2)
length(Comp[cub_Sch > 2])
nrow(Comp[cub_Sch >2])
nrow(Comp[cub_Sch > 2])
nrow(Comp[cub_Sch > 2,])
nrow(Comp[cub_Sch < -2,])
##############Comparing models based on AIC values############
#Comparing and selecting the lowest AIC values as the best fit
Compare_AIC = as.data.frame(matrix(NaN, nr=903, nc=5))
for(i in 1:903){
Compare_AIC[i,1] = i
if(any(lm2_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 2] = lm2_model_fitting$AIC[lm2_model_fitting$ID == i]
if(any(lm3_model_fitting$ID == i,na.rm = T)) Compare_AIC[i, 3] = lm3_model_fitting$AIC[lm3_model_fitting$ID == i]
if(any(Briere_AIC$ID == i, na.rm = T)) Compare_AIC[i, 4] = Briere_AIC$AIC[Briere_AIC$ID == i]
if(any(School_fit_AIC$ID == i, na.rm = T)) Compare_AIC[i, 5] = School_fit_AIC$AIC[School_fit_AIC$ID == i]
}
colnames(Compare_AIC) = c("ID", "quadratic", "cubic", "Briere", "Schoolfield")
Compare_AIC = Compare_AIC[-which(is.na(Compare_AIC$quadratic)),]
Best_fit = colnames(Compare_AIC[,2:5])[apply(Compare_AIC[,2:5], 1, function(x) which(x == min(x, na.rm = T)))]
Compare_AIC = cbind(Compare_AIC, Best_fit, lm2_model_fitting[,c(2:3, 8:10)])
nrow(Compare_AIC[Compare_AIC$cubic - Compare_AIC$Schoolfield > 2,])
nrow(Compare_AIC[Compare_AIC$cubic - Compare_AIC$Schoolfield < -2,])
nrow(Compare_AIC[Compare_AIC$quadratic - Compare_AIC$cubic > 2,])
nrow(Compare_AIC[Compare_AIC$quadratic - Compare_AIC$cubic < -2,])
sum(Compare_AIC$Best_fit == "quadratic")
nrow(Comp$qua_cub[Comp$qua_cub > 2,])
length(Comp$qua_cub[Comp$qua_cub > 2])
length(Comp$qua_cub > 2)
Comp = data.frame(Compare_AIC$ID, qua_cub, qua_Bri, qua_Sch, cub_Bri, cub_Sch, Bri_Sch)
length(Comp$qua_cub > 2)
nrow(Comp$qua_cub[Comp$qua_cub > 2,])
nrow(Comp$qua_cub[Comp$qua_cub > 2])
sum(Comp$qua_cub > 2)
Comp$qua_cub > 2
length(Comp$qua_cub > 2)
nrow(Comp[Comp$qua_cub > 2,])
nrow(Comp[Comp$cub_Sch > 2,])
nrow(Comp[Comp$cub_Sch < -2,])
nrow(Compare_AIC[Compare_AIC$cubic - Compare_AIC$Schoolfield < -2,])
nrow(Compare_AIC[Compare_AIC$cubic - Compare_AIC$Schoolfield < -2,])/nrow(Compare_AIC)
nrow(Compare_AIC[Compare_AIC$cubic - Compare_AIC$Schoolfield > 2,])/nrow(Compare_AIC)
