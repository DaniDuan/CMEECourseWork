abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
print((i-200)/20)
}
}
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
duration = 2000
for(i in 1:(200 + duration)){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
print((i-200)/20)
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
octave_max_mean
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
print((i-200)/20)
}
}
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if((i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
print((i-200)/20)
}
}
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
print((i-200)/20)
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(rbind(octave_max_mean,octave_min_mean), beside = T)
rbind(octave_max_mean,octave_min_mean)
colnames(mean_values) = c(2e0, 2e1, 2e2, 2e3, 2e4, 2e5)
mean_values = rbind(octave_max_mean,octave_min_mean)
colnames(mean_values) = c(2e0, 2e1, 2e2, 2e3, 2e4, 2e5)
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(mean_values, beside = T)
colnames(mean_values) = c("2e0", "2e1", "2e2", "2e3", "2e4", "2e5")
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(mean_values, beside = T)
octaves()
abundance_max
community_max
community_min
abundance_min
abundance_max
species_abundance()
octaves()
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(rbind(octave_max_mean,octave_min_mean), beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class")
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(rbind(octave_max_mean,octave_min_mean), beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", col = c(1,2))
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(rbind(octave_max_mean,octave_min_mean), beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(rbind(octave_max_mean,octave_min_mean), beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(rbind(octave_max_mean,octave_min_mean), beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
View(data)
2^5
2^8
2^7
2^6
abundance_max
octave_max_mean
abundance_max
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(rbind(octave_max_mean,octave_min_mean), beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Number of Individual per Species", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(rbind(octave_max_mean,octave_min_mean), beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Number of Individuals per Species", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(rbind(octave_max_mean,octave_min_mean), beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Number of Individuals per Species", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c(2,4,8,16,32)
octave_max_mean
colnames(data) = c(2,4,8,16,32,64)
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
abundance_min
colnames(data) = c(0,1,2,3,4)
colnames(data) = c(0,1,2,3,4,5)
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
colnames(data) = c(1,2,3,4,5,6)
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
# Question 16
question_16 <- function()  {
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c(1,2,3,4,5,6)
#graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
return("type your written answer here")
}
question_16()
# Question 16
question_16 <- function()  {
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c(1,2,3,4,5,6)
graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
return("type your written answer here")
}
question_16()
barplot(data, beside = T, ylim = c(0, 11), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
barplot(data, beside = T, ylim = c(0, 12), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
barplot(data, beside = T, ylim = c(0, 11), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
barplot(data, beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
richness = neutral_time_series(community = init_community_max(100), duration = 200)
plot(richness, pch = 1, cex = 0.75, ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
abline(h = 1, lty = 3)
plot(richness_max, type = "l", pch = 1, cex = 0.75, col = 1, ylim = c(0,100), ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
lines(richness_min, pch = 1, cex = 0.75, col = 2)
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c(1,2,3,4,5,6)
graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylim = c(0, 10), ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
rm(octave_max)
rm(octave_min)
question_16()
question_16()
barplot(data, beside = T, ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
question_16()
# Question 16
question_16 <- function()  {
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c(1,2,3,4,5,6)
graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
return("Initial condition of the system does not matter, since this calculation was conducted after the system has already reached its dynamic equilibrium which is related to the speciation rate.")
}
?proc.time
proc.time(a = b)
proc.time(a = 2)
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()$system
proc.time()[2]
proc.time()[2,]
proc.time()[,2]
proc.time()[1]
proc.time()[2]
proc.time()[3]
proc.time()[2]
proc.time()[2] < 100
proc.time()
proc.time()
proc.time()
proc.time()
list(a = 2, b = 3)
# Question 17
cluster_run <- function(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1,
interval_oct=10, burn_in_generations=200,
output_file_name="my_test_file_1.rda")  {
start_time = proc.time()[3]
community_max = init_community_max(size)
community_min = init_community_min(size)
richness_max = c(species_richness(community_max))
richness_min = c(species_richness(community_min))
i = 0
repeat{
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
abundance_max = species_abundance(community_max)
abundance_min = species_abundance(community_min)
i = i + 1
if(i <= burn_in_generations && (i - burn_in_generations) %% interval_rich == 0){
richness_max = c(richness_max, species_richness(neutral_generation_speciation(community_max, speciation_rate)))
richness_min = c(richness_min, species_richness(neutral_generation_speciation(community_min, speciation_rate)))
octave_max = octaves(abundance_max)
octave_min = octaves(abundance_min)
}else{
if((i - burn_in_generations) %% interval_oct == 0){
octave_max = rbind(octave_max, octaves(abundance_max))
octave_min = rbind(octave_min, octaves(abundance_min))
}
}
if(proc.time()[3]-start_time == 60*wall_time) break
}
time_spent = proc.time()[3]-start_time
input_parameters = list(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200)
save(richness_max, richness_min, octave_max, octave_min, community_max, community_min, time_spent, input_parameters,  file = output_file_name)
}
cluster_run()
# Question 17
cluster_run <- function(speciation_rate = 0.1, size=100, wall_time=1, interval_rich=1,
interval_oct=10, burn_in_generations=200,
output_file_name="my_test_file_1.rda")  {
start_time = proc.time()[3]
community_max = init_community_max(size)
community_min = init_community_min(size)
richness_max = c(species_richness(community_max))
richness_min = c(species_richness(community_min))
i = 0
repeat{
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
abundance_max = species_abundance(community_max)
abundance_min = species_abundance(community_min)
i = i + 1
if(i <= burn_in_generations && (i - burn_in_generations) %% interval_rich == 0){
richness_max = c(richness_max, species_richness(neutral_generation_speciation(community_max, speciation_rate)))
richness_min = c(richness_min, species_richness(neutral_generation_speciation(community_min, speciation_rate)))
octave_max = octaves(abundance_max)
octave_min = octaves(abundance_min)
}else{
if((i - burn_in_generations) %% interval_oct == 0){
octave_max = rbind(octave_max, octaves(abundance_max))
octave_min = rbind(octave_min, octaves(abundance_min))
}
}
if(proc.time()[3]-start_time == 60*wall_time) break
}
time_spent = proc.time()[3]-start_time
input_parameters = list(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200)
save(richness_max, richness_min, octave_max, octave_min, community_max, community_min, time_spent, input_parameters,  file = output_file_name)
}
cluster_run()
# Question 17
cluster_run <- function(speciation_rate = 0.1, size=100, wall_time=0.25, interval_rich=1,
interval_oct=10, burn_in_generations=200,
output_file_name="my_test_file_1.rda")  {
start_time = proc.time()[3]
community_max = init_community_max(size)
community_min = init_community_min(size)
richness_max = c(species_richness(community_max))
richness_min = c(species_richness(community_min))
i = 0
repeat{
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
abundance_max = species_abundance(community_max)
abundance_min = species_abundance(community_min)
i = i + 1
if(i <= burn_in_generations && (i - burn_in_generations) %% interval_rich == 0){
richness_max = c(richness_max, species_richness(neutral_generation_speciation(community_max, speciation_rate)))
richness_min = c(richness_min, species_richness(neutral_generation_speciation(community_min, speciation_rate)))
octave_max = octaves(abundance_max)
octave_min = octaves(abundance_min)
}else{
if((i - burn_in_generations) %% interval_oct == 0){
octave_max = rbind(octave_max, octaves(abundance_max))
octave_min = rbind(octave_min, octaves(abundance_min))
}
}
if(proc.time()[3]-start_time == 60*wall_time) break
}
time_spent = proc.time()[3]-start_time
input_parameters = list(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200)
save(richness_max, richness_min, octave_max, octave_min, community_max, community_min, time_spent, input_parameters,  file = output_file_name)
}
cluster_run()
# Question 17
cluster_run <- function(speciation_rate = 0.1, size=100, wall_time=0.25, interval_rich=1,
interval_oct=10, burn_in_generations=200,
output_file_name="my_test_file_1.rda")  {
start_time = proc.time()[3]
community_max = init_community_max(size)
community_min = init_community_min(size)
richness_max = c(species_richness(community_max))
richness_min = c(species_richness(community_min))
i = 0
repeat{
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
abundance_max = species_abundance(community_max)
abundance_min = species_abundance(community_min)
i = i + 1
if(i <= burn_in_generations && (i - burn_in_generations) %% interval_rich == 0){
richness_max = c(richness_max, species_richness(neutral_generation_speciation(community_max, speciation_rate)))
richness_min = c(richness_min, species_richness(neutral_generation_speciation(community_min, speciation_rate)))
octave_max = octaves(abundance_max)
octave_min = octaves(abundance_min)
}else{
if((i - burn_in_generations) %% interval_oct == 0){
octave_max = rbind(octave_max, octaves(abundance_max))
octave_min = rbind(octave_min, octaves(abundance_min))
}
}
if(proc.time()[3]-start_time >= 60*wall_time) {break}
}
time_spent = proc.time()[3]-start_time
input_parameters = list(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200)
save(richness_max, richness_min, octave_max, octave_min, community_max, community_min, time_spent, input_parameters,  file = output_file_name)
}
cluster_run()
warnings()
# Question 17
cluster_run <- function(speciation_rate = 0.1, size=100, wall_time=0.25, interval_rich=1,
interval_oct=10, burn_in_generations=200,
output_file_name="my_test_file_1.rda")  {
start_time = proc.time()[3]
community_max = init_community_max(size)
community_min = init_community_min(size)
richness_max = c(species_richness(community_max))
richness_min = c(species_richness(community_min))
i = 0
repeat{
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
abundance_max = species_abundance(community_max)
abundance_min = species_abundance(community_min)
i = i + 1
if(i <= burn_in_generations && (i - burn_in_generations) %% interval_rich == 0){
richness_max = c(richness_max, species_richness(neutral_generation_speciation(community_max, speciation_rate)))
richness_min = c(richness_min, species_richness(neutral_generation_speciation(community_min, speciation_rate)))
octave_max = octaves(abundance_max)
octave_min = octaves(abundance_min)
}else{
if((i - burn_in_generations) %% interval_oct == 0){
octave_max = list(octave_max, octaves(abundance_max))
octave_min = list(octave_min, octaves(abundance_min))
}
}
if(proc.time()[3]-start_time >= 60*wall_time) {break}
}
time_spent = proc.time()[3]-start_time
input_parameters = list(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200)
save(richness_max, richness_min, octave_max, octave_min, community_max, community_min, time_spent, input_parameters,  file = output_file_name)
}
warnings()
cluster_run()
load(file = "my_test_file_1.rda")
View(octave_max)
View(octave_max)
# Question 17
cluster_run <- function(speciation_rate = 0.1, size=100, wall_time=0.25, interval_rich=1,
interval_oct=10, burn_in_generations=200,
output_file_name="my_test_file_1.rda")  {
start_time = proc.time()[3]
community_max = init_community_max(size)
community_min = init_community_min(size)
richness_max = c(species_richness(community_max))
richness_min = c(species_richness(community_min))
i = 0
repeat{
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
abundance_max = species_abundance(community_max)
abundance_min = species_abundance(community_min)
i = i + 1
if(i <= burn_in_generations && (i - burn_in_generations) %% interval_rich == 0){
richness_max = c(richness_max, species_richness(neutral_generation_speciation(community_max, speciation_rate)))
richness_min = c(richness_min, species_richness(neutral_generation_speciation(community_min, speciation_rate)))
octave_max = list(octaves(abundance_max))
octave_min = list(octaves(abundance_min))
}else{
if((i - burn_in_generations) %% interval_oct == 0){
octave_max[[(i - burn_in_generations)/interval_oct + 1]] = octaves(abundance_max)
octave_min[[(i - burn_in_generations)/interval_oct + 1]] = octaves(abundance_min)
}
}
if(proc.time()[3]-start_time >= 60*wall_time) {break}
}
time_spent = proc.time()[3]-start_time
input_parameters = list(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200)
save(richness_max, richness_min, octave_max, octave_min, community_max, community_min, time_spent, input_parameters,  file = output_file_name)
}
cluster_run()
load(file = "my_test_file_1.rda")
View(octave_max)
View(mean_values)
View(octave_max)
View(octave_min)
View(input_parameters)
rm(list = ls())
load(file = "my_test_file_1.rda")
richness_max
richness_min
View(octave_max)
