save(richness_max, richness_min, octave_max, octave_min, community_max, community_min, time_spent, input_parameters,  file = output_file_name)
}
warnings()
cluster_run()
load(file = "my_test_file_1.rda")
View(octave_max)
View(octave_max)
# Question 17
cluster_run <- function(speciation_rate = 0.1, size=100, wall_time=0.25, interval_rich=1,
interval_oct=10, burn_in_generations=200,
output_file_name="my_test_file_1.rda")  {
start_time = proc.time()[3]
community_max = init_community_max(size)
community_min = init_community_min(size)
richness_max = c(species_richness(community_max))
richness_min = c(species_richness(community_min))
i = 0
repeat{
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
abundance_max = species_abundance(community_max)
abundance_min = species_abundance(community_min)
i = i + 1
if(i <= burn_in_generations && (i - burn_in_generations) %% interval_rich == 0){
richness_max = c(richness_max, species_richness(neutral_generation_speciation(community_max, speciation_rate)))
richness_min = c(richness_min, species_richness(neutral_generation_speciation(community_min, speciation_rate)))
octave_max = list(octaves(abundance_max))
octave_min = list(octaves(abundance_min))
}else{
if((i - burn_in_generations) %% interval_oct == 0){
octave_max[[(i - burn_in_generations)/interval_oct + 1]] = octaves(abundance_max)
octave_min[[(i - burn_in_generations)/interval_oct + 1]] = octaves(abundance_min)
}
}
if(proc.time()[3]-start_time >= 60*wall_time) {break}
}
time_spent = proc.time()[3]-start_time
input_parameters = list(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200)
save(richness_max, richness_min, octave_max, octave_min, community_max, community_min, time_spent, input_parameters,  file = output_file_name)
}
cluster_run()
load(file = "my_test_file_1.rda")
View(octave_max)
View(mean_values)
View(octave_max)
View(octave_min)
View(input_parameters)
rm(list = ls())
load(file = "my_test_file_1.rda")
richness_max
richness_min
View(octave_max)
# Question 1
species_richness <- function(community = c(1,4,4,5,1,6,1)){
return(length(unique(community)))
}
# Question 2
init_community_max <- function(size = 7){
return(seq(from = 1, to = size, by = 1))
}
# Question 3
init_community_min <- function(size = 4){
return(rep(1, times = size))
}
# Question 4
choose_two <- function(max_value = 4){
return(sample(max_value,2, replace = F))
}
# Question 5
neutral_step <- function(community = c(10,5,13)){
index = choose_two(length(community))
community[index[1]] = community[index[2]]
return(community)
}
# Question 6
neutral_generation <- function(community = c(1,5,2,6,8,13,25)){
for(i in 1:floor(length(community)/2)) community = neutral_step(community)
return(community)
}
# Question 7
neutral_time_series <- function(community = init_community_max(7) , duration = 20)  {
richness = c(species_richness(community))
for(i in 1:duration){
community = neutral_generation(community)
richness = c(richness, species_richness(neutral_generation(community)))
}
return(richness)
}
# Question 8
question_8 <- function() {
richness = neutral_time_series(community = init_community_max(100), duration = 200)
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(richness, pch = 1, cex = 0.75, ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
abline(h = 1, lty = 3)
text(x = 160, y = 7.5, "Converging to diversity = 1")
return("If we wait long enough, the diversity will always converge to 1. Since in this system, all species are considered with same possibility for reproduction and replacement without speciation or new species being introduced, as one species' abundance increases, the probability of reproduction of that species would also increase, therefore the system will finally result in the homogeneity of species.")
}
# Question 9
neutral_step_speciation <- function(community = c(10,5,13), speciation_rate = 0.2)  {
index = choose_two(length(community))
rate = runif(1)
if(rate < speciation_rate){
community[index[1]] = max(community) + 1
}else{
community[index[1]] = community[index[2]]
}
return(community)
}
# Question 10
neutral_generation_speciation <- function(community = c(10,5,13), speciation_rate = 0.2)  {
for(i in 1:floor(length(community)/2)) community = neutral_step_speciation(community, speciation_rate)
return(community)
}
# Question 11
neutral_time_series_speciation <- function(community = init_community_max(100), speciation_rate = 0.1, duration = 500)  {
richness = c(species_richness(community))
for(i in 1:duration){
community = neutral_generation_speciation(community, speciation_rate)
richness = c(richness, species_richness(neutral_generation_speciation(community, speciation_rate)))
}
return(richness)
}
# Question 12
question_12 <- function()  {
richness_max = neutral_time_series_speciation(community = init_community_max(100), speciation_rate = 0.1, duration = 200)
richness_min = neutral_time_series_speciation(community = init_community_min(100), speciation_rate = 0.1, duration = 200)
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(richness_max, type = "l", pch = 1, cex = 0.75, col = 1, ylim = c(0,100), ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
lines(richness_min, pch = 1, cex = 0.75, col = 2)
legend('topright', c('richness_max','richness_min'), fill = c(1,2))
return("?Given time, the final convergence of diversity is determined by the speciation rate and the initial size of the community, but not related to the initial diversity of the system. Because when the rate of extinction is balanced by the rate of speciation, the diversity of this system will reach a dynamic equilibrium.")
}
# Question 13
species_abundance <- function(community = c(1,5,3,6,5,6,1,1))  {
return(sort(as.data.frame(table(community))[,2],decreasing = T))
}
# Question 14
octaves <- function(abundance_vector = c(100,64,63,5,4,3,2,2,1,1,1,1)) {
return(tabulate(floor(log2(abundance_vector))+1))
}
# Question 15
sum_vect <- function(x = c(1,3), y = c(1,0,5,2)) {
if(length(x) < length(y)){
x = c(x, rep(0, (length(y)-length(x))))
}else{
y = c(y, rep(0, (length(x)-length(y))))
}
return(x+y)
}
# Question 16
question_16 <- function()  {
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c(1,2,3,4,5,6)
graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
return("Initial condition of the system does not matter, since this calculation was conducted after the system has already reached its dynamic equilibrium which is related to the speciation rate.")
}
# Question 17
cluster_run <- function(speciation_rate = 0.1, size=100, wall_time=0.25, interval_rich=1,
interval_oct=10, burn_in_generations=200,
output_file_name="my_test_file_1.rda")  {
start_time = proc.time()[3]
community_max = init_community_max(size)
community_min = init_community_min(size)
richness_max = c(species_richness(community_max))
richness_min = c(species_richness(community_min))
i = 0
repeat{
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
abundance_max = species_abundance(community_max)
abundance_min = species_abundance(community_min)
i = i + 1
if(i <= burn_in_generations && (i - burn_in_generations) %% interval_rich == 0){
richness_max = c(richness_max, species_richness(neutral_generation_speciation(community_max, speciation_rate)))
richness_min = c(richness_min, species_richness(neutral_generation_speciation(community_min, speciation_rate)))
octave_max = list(octaves(abundance_max))
octave_min = list(octaves(abundance_min))
}else{
if((i - burn_in_generations) %% interval_oct == 0){
octave_max[[(i - burn_in_generations)/interval_oct + 1]] = octaves(abundance_max)
octave_min[[(i - burn_in_generations)/interval_oct + 1]] = octaves(abundance_min)
}
}
if(proc.time()[3]-start_time >= 60*wall_time) {break}
}
time_spent = proc.time()[3]-start_time
input_parameters = list(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200)
save(richness_max, richness_min, octave_max, octave_min, community_max, community_min, time_spent, input_parameters,  file = output_file_name)
}
richness = neutral_time_series(community = init_community_max(100), duration = 200)
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(richness, pch = 1, cex = 0.75, ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
abline(h = 1, lty = 3)
text(x = 160, y = 7.5, "Converging to diversity = 1")
# Question 8
question_8 <- function() {
richness = neutral_time_series(community = init_community_max(100), duration = 200)
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(richness, pch = 1, cex = 0.75, ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
abline(h = 1, lty = 3)
text(x = 160, y = 7.5, "Converging to diversity = 1")
return("If we wait long enough, the diversity will always converge to 1. Since in this system, all species are considered with same possibility for reproduction and replacement without speciation or new species being introduced, as one species' abundance increases, the probability of reproduction of that species would also increase, therefore the system will finally result in the homogeneity of species.")
}
question_89
question_8
question_8
question_8()
question_12()
question_16()
# Question 16
question_16 <- function()  {
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c(1,2,3,4,5,6)
graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1))
return("Initial condition of the system does not matter, since this calculation was conducted after the system has already reached its dynamic equilibrium which is related to the speciation rate.")
}
question_16()
richness = neutral_time_series(community = init_community_max(100), duration = 200)
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(richness, pch = 19, cex = 0.1, ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
abline(h = 1, lty = 3)
plot(richness, type = "l", ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
abline(h = 1, lty = 3)
text(x = 160, y = 7.5, "Converging to diversity = 1")
plot(richness, type = "l", frame.plot = F, ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
abline(h = 1, lty = 3)
text(x = 160, y = 7.5, "Converging to diversity = 1")
return("If we wait long enough, the diversity will always converge to 1. Since in this system, all species are considered with same possibility for reproduction and replacement without speciation or new species being introduced, as one species' abundance increases, the probability of reproduction of that species would also increase, therefore the system will finally result in the homogeneity of species.")
text(x = 160, y = 20, "Converging to diversity = 1")
richness = neutral_time_series(community = init_community_max(100), duration = 200)
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(richness, type = "l", frame.plot = F, ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
abline(h = 1, lty = 3)
text(x = 160, y = 20, "Converging to diversity = 1")
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(richness, type = "l", frame.plot = F, ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
abline(h = 1, lty = 3)
text(x = 160, y = 17.5, "Converging to diversity = 1")
richness_max = neutral_time_series_speciation(community = init_community_max(100), speciation_rate = 0.1, duration = 200)
richness_min = neutral_time_series_speciation(community = init_community_min(100), speciation_rate = 0.1, duration = 200)
graphics.off()# clear any existing graphs and plot your graph within the R window
plot(richness_max, type = "l", pch = 1, cex = 0.75, col = 1, ylim = c(0,100), ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
lines(richness_min, pch = 1, cex = 0.75, col = 2)
legend('topright', c('richness_max','richness_min'), fill = c(1,2))
plot(richness_max, frame.plot = F, type = "l", pch = 1, cex = 0.75, col = 1, ylim = c(0,100), ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
lines(richness_min, pch = 1, cex = 0.75, col = 2)
legend('topright', c('richness_max','richness_min'), fill = c(1,2))
legend('topright', c('richness_max','richness_min'), fill = c(1,2), bty = "n")
plot(richness_max, frame.plot = F, type = "l", pch = 1, cex = 0.75, col = 1, ylim = c(0,100), ylab = "Diversity", xlab = "Generation", main = "Time Series Graph of a Neutral Model Simulation")
lines(richness_min, pch = 1, cex = 0.75, col = 2)
legend('topright', c('richness_max','richness_min'), fill = c(1,2), bty = "n")
# Question 16
question_16 <- function()  {
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c("1","2-3","4-7","8-15","16-31","32-64")
graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylab = "Number of Species", xlab = "Abundance Class", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1), bty = "n")
return("Initial condition of the system does not matter, since this calculation was conducted after the system has already reached its dynamic equilibrium which is related to the speciation rate.")
}
question_16()
# Question 16
question_16 <- function()  {
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c("1","2-3","4-7","8-15","16-31","32-64")
graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylab = "Number of Species", xlab = "Species Abundance", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1), bty = "n")
return("Initial condition of the system does not matter, since this calculation was conducted after the system has already reached its dynamic equilibrium which is related to the speciation rate.")
}
question_16()
barplot(data, beside = T, ylab = "Number of Species", ylim = c(0,12), xlab = "Species Abundance", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
barplot(data, beside = T, ylab = "Number of Species", ylim = c(0,12), xlab = "Species Abundance", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
octave_max = 0
octave_min = 0
community_max = init_community_max(100)
community_min = init_community_min(100)
for(i in 1:2200){
community_max = neutral_generation_speciation(community = community_max, speciation_rate = 0.1)
community_min = neutral_generation_speciation(community = community_min, speciation_rate = 0.1)
if(i >= 200 & (i-200) %% 20 == 0){
abundance_max = species_abundance(community_max)
octave_max = sum_vect(octave_max, octaves(abundance_max))
abundance_min = species_abundance(community_min)
octave_min = sum_vect(octave_min, octaves(abundance_min))
}
}
octave_max_mean = octave_max/101
octave_min_mean = octave_min/101
data = rbind(octave_max_mean,octave_min_mean)
colnames(data) = c("1","2-3","4-7","8-15","16-31","32-64")
graphics.off()# clear any existing graphs and plot your graph within the R window
barplot(data, beside = T, ylab = "Number of Species", ylim = c(0,12), xlab = "Species Abundance", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1), bty = "n")
barplot(data, beside = T, ylab = "Number of Species", ylim = c(0,11), xlab = "Species Abundance", main = "Species Abundance Octave of Neutral Model Simulation",col = c(0,1))
legend("topright", c("octave_max", "octave_min"), fill = c(0,1), bty = "n")
print(paste(student_username,"/",student_username,"_HPC_",year,"_main.R",sep=""))
data_from_loading <- load_student_work(test_username)
rm(list=ls())
test_username <- "DaniDuan" # this should be your username
year <- 2020
# make vectors to store the results -1 means that question was not marked yet
final_mark <- seq(-1,-1,length=30)
final_mark_max <- c(2,1,1,2,2,2,2,3,3,1,1,4,3,3,2,4,6,6,10,10,2,2,8,2,2,2,3,4,3,4)
final_comments_main <- list()
final_comments_main[[length(final_mark)+1]] <- "END"
test_data_updated <- function(variable,variable_name,default_value) {
if (!exists(variable_name)){
return(paste("ERROR: no variable named",variable_name,"workspace might have been wrongly cleared",sep=" "))
} else {
if (variable == default_value) {
return(paste("ERROR: variable named",variable_name,"was not set correctly",sep=" "))
} else
{
return(paste(variable_name,"was set to",variable,sep=" "))
}
}
}
test_data_correct <- function(variable,variable_name,expected_value) {
if (!exists(variable_name)){
return(paste("ERROR: no variable named",variable_name,"workspace might have been wrongly cleared",sep=" "))
} else {
if (variable != expected_value) {
return(paste("ERROR: variable named",variable_name,"was not set correctly to",expected_value,sep=" "))
} else
{
return(paste(variable_name,"was set to",variable,sep=" "))
}
}
}
load_student_work <- function(student_username) {
print(paste(student_username,"/",student_username,"_HPC_",year,"_main.R",sep=""))
student_file <- paste(student_username,"/",student_username,"_HPC_",year,"_main.R",sep="")
load_test_data <- list()
if(file_test("-f",student_file)) {
source(student_file)
load_test_data[[length(load_test_data)+1]] <- "FILE SOURCED"
load_test_data[[length(load_test_data)+1]] <-  test_data_updated(name,"name","Quqiming Duan")
load_test_data[[length(load_test_data)+1]] <-  test_data_updated(preferred_name,"preferred_name","Danica")
load_test_data[[length(load_test_data)+1]] <-  test_data_updated(email,"email","d.duan20@imperial.ac.uk")
load_test_data[[length(load_test_data)+1]] <-  test_data_correct(username,"username",test_username)
} else {
load_test_data[[length(load_test_data)+1]] <- "ERROR: no file to source"
}
print(load_test_data)
return(load_test_data)
}
add_comment <- function(question,comment) {
if (length(final_comments_main)<question)
{
final_comments_main[[question]] <<- comment
}
else {
if (is.null(final_comments_main[[question]])) {
final_comments_main[[question]] <<- comment
} else {
final_comments_main[[question]] <<- paste( final_comments_main[[question]],comment,sep=", ")
}
}
}
# new identical function (identical built in is very sensitive to things that don't matter for marking)
is_identical <- function(ros_x , ros_y) {
if (length(ros_x) != length(ros_y)) {
return(FALSE)
} else {
for (i in 1:(length(ros_y)))
{
if (ros_x[i] != ros_y[i])
return(FALSE)
}
}
return(TRUE)
}
# check that a function exists and provide printed output
basic_test <- function(question,func_name=NULL)
{
if (!is.null(func_name))
{
if (exists(func_name))
{
return(TRUE)
} else {
add_comment(question,"missing function for Q")
final_mark[question] = 0;
final_done[question] = 1;
return(FALSE)
}
} else {
return(TRUE)
}
}
basic_func_test <- function(question, func_input, given_output, correct_output,text_message ="") {
func_input_str <- ""
if (!is.null(func_input))
{if(length(func_input) == 1) {
func_input_str <- paste(func_input)
} else {
func_input_str <- paste("c(",paste(func_input,collapse=","),")",sep="")
}}
if (is.null(given_output)) {
add_comment(question,paste(text_message,func_input_str,"evaluates as null",sep=" "))
return(FALSE)
} else {
if (!is_identical(given_output,correct_output)) {
add_comment(question,paste(text_message,func_input_str,"evaluates incorrectly"))
return(FALSE)
} else {
return(TRUE)
}
}
}
save_to_file <- function(filename)
{
write(paste("HPC long practical feedback for",preferred_name,"(",name,")",year,sep=" "), file = filename, append=FALSE)
write(" ", file = filename, append=TRUE)
for (i in 1:length(data_from_loading)) {
write(data_from_loading[[i]], file = filename, append=TRUE)
}
write(" ", file = filename, append=TRUE)
write("Marks for main questions", file = filename, append=TRUE)
for(i in c(1,2,3,13,14,15))
{
if (final_mark[i] >= 0)
{
if ((length(final_comments_main)>=i)&&(!is.null(final_comments_main[[i]])))
{
write(paste("Q",i,":   ",final_mark[i],"/",final_mark_max[i],"   comments:",final_comments_main[[i]]), file = filename, append=TRUE)
} else {
write(paste("Q",i,":   ",final_mark[i],"/",final_mark_max[i]), file = filename, append=TRUE)
}
} else {
if ((length(final_comments_main)>=i)&&(!is.null(final_comments_main[[i]])))
{
write(paste("Q",i,":   ","?","/",final_mark_max[i],"   comments:",final_comments_main[[i]]), file = filename, append=TRUE)
} else {
write(paste("Q",i,":   ","?","/",final_mark_max[i]), file = filename, append=TRUE)
}
final_mark[i] <<- 0
}
}
write(" ", file = filename, append=TRUE)
write("Remember this test only marks questions 1-3 and 13-15", file = filename, append=TRUE)
}
data_from_loading <- load_student_work(test_username)
source('~/Documents/CMEECourseWork/HPC/model code/DaniDuan/formative_automark_2020.R')
source('~/Documents/CMEECourseWork/HPC/model code/formative_automark_2020.R')
